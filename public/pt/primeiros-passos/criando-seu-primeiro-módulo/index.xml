<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Charles C.D. – Criando seu primeiro módulo</title>
    <link>https://docs.charlescd.io/pt/primeiros-passos/criando-seu-primeiro-m%C3%B3dulo/</link>
    <description>Recent content in Criando seu primeiro módulo on Charles C.D.</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://docs.charlescd.io/pt/primeiros-passos/criando-seu-primeiro-m%C3%B3dulo/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Primeiros Passos: Configurando o chart template</title>
      <link>https://docs.charlescd.io/pt/primeiros-passos/criando-seu-primeiro-m%C3%B3dulo/configurando-o-chart-template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.charlescd.io/pt/primeiros-passos/criando-seu-primeiro-m%C3%B3dulo/configurando-o-chart-template/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2&gt;&lt;strong&gt;O que é o Helm?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;O Helm Charts é um gerenciador de pacotes que permite você definir, instalar e atualizar as aplicações no Kubernetes, independente do grau de complexidade.&lt;/p&gt;
&lt;p&gt;No contexto do Charles, o &lt;a href=&#34;https://helm.sh/docs/chart_template_guide/getting_started/&#34;&gt;&lt;strong&gt;Chart Template&lt;/strong&gt;&lt;/a&gt; é usado como uma coleção de arquivos relacionados a configurações do Kubernetes.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

Se você não tiver configurado o &lt;strong&gt;seu módulo,&lt;/strong&gt; &lt;a href=&#34;.././&#34;&gt;&lt;strong&gt;acesse aqui&lt;/strong&gt;&lt;/a&gt;. É importante lembrar que você deve cadastrar a URL no módulo.
&lt;/div&gt;

&lt;h2&gt;Como configurar o chart template?&lt;/h2&gt;
&lt;p&gt;Siga os próximos passos para configurar o app de exemplo.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Passo 1: Crie um diretório do chart template&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Para começar, você precisa salvar os seus templates em uma ferramenta de versionamento da sua preferência. Assim que criar um novo chart template, você precisa dar ao diretório o mesmo nome do componente ao qual ele se refere&lt;/p&gt;
&lt;p&gt;A estrutura abaixo contém os templates necessários para se fazer o deploy de um módulo que possui um componente chamado “circles-sample”.&lt;/p&gt;
&lt;p&gt;A imagem demonstra como seu diretório deve ficar:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//screen-shot-2020-08-13-at-09.16.04.png&#34; alt=&#34; Diret&amp;#xF3;rio de chart template do circle-sample&#34;&gt;&lt;/p&gt;
&lt;h3&gt;Passo 2: Configure os itens do diretório&lt;/h3&gt;
&lt;p&gt;Depois de criado o diretório, você deve configurá-lo. Veja quais arquivos são necessários para seguir com essa configuração:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;templates/ :&lt;/strong&gt; contém nossos modelos.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;deployment.yaml:&lt;/strong&gt; descreve a estrutura de &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/&#34;&gt;&lt;strong&gt;deployment&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;service.yaml:&lt;/strong&gt; descreve a estrutura do &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/service/&#34;&gt;&lt;strong&gt;service&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;O arquivo &lt;strong&gt;Chart.yaml&lt;/strong&gt; contém uma descrições como version, name, description. É necessário definir a version como &amp;ldquo;darwin&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;O arquivo &lt;strong&gt;circles-sample.yaml&lt;/strong&gt; possui os valores que serão utilizados nos nossos templates.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Essas são as informações que o Charles precisa ter no templates. Vale ressaltar que você pode incrementar esses templates da forma como você preferir.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;Com o seu diretório configurado de acordo com a estrutura acima, vá até a pasta &amp;ldquo;circles-sample&amp;rdquo; e execute o comando  &lt;strong&gt;&amp;quot;&lt;code&gt;helm package .&lt;/code&gt;&amp;quot;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Ao final desse comando, você terá uma arquivo &lt;strong&gt;tgz&lt;/strong&gt; com o nome de circles-samples-darwin. Nossa ferramenta de CD procura esse &lt;strong&gt;tgz&lt;/strong&gt; para executar o template&lt;/p&gt;

&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Primeiros Passos: Configurando seus módulos para propagar o id do círculo</title>
      <link>https://docs.charlescd.io/pt/primeiros-passos/criando-seu-primeiro-m%C3%B3dulo/configurando-seus-m%C3%B3dulos-para-propagar-o-id-do-c%C3%ADrculo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.charlescd.io/pt/primeiros-passos/criando-seu-primeiro-m%C3%B3dulo/configurando-seus-m%C3%B3dulos-para-propagar-o-id-do-c%C3%ADrculo/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2&gt;Por que configurar?&lt;/h2&gt;
&lt;p&gt;Quando você trabalha em cenários com vários microsserviços, configurar os módulos é uma forma de garantir a propagação de header &lt;code&gt;x-circle-id&lt;/code&gt; e com isso certificar o &lt;a href=&#34;../../../../referencia/circulo#como-integrar-circulos-com-servicos&#34;&gt;&lt;strong&gt;roteamento dos usuários para as versões corretas&lt;/strong&gt;&lt;/a&gt;. Dessa forma, você torna possível que o usuário da sua base chegue na mesma versão de todos os microserviços que fazem parte do seu teste de hipótese.&lt;/p&gt;
&lt;p&gt;Por exemplo, se você testar uma feature entre microserviços que tenham integrações em um fluxo de abertura de conta, é necessário garantir que o usuário será redirecionado a todas as versões corretas que estão no teste de hipóteses, criado para esse fluxo.&lt;/p&gt;
&lt;p&gt;Para garantir isso, você pode utilizar uma biblioteca de propagação do header &lt;code&gt;x-circle-id&lt;/code&gt;, que faz com que o &lt;a href=&#34;../../../referencia/circle-matcher#identificacao-de-circulos-atraves-da-api&#34;&gt;&lt;strong&gt;id do círculo identificado pelo &lt;code&gt;circle-matcher&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;seja repassado entre todas as requisições dentro da malha de microserviço, garantindo assim, que os usuários sejam redirecionados para a versão correta do seu teste de hipótese.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

Caso exista um microserviço dentro do fluxo que não faz parte do seu teste, o valor do círculo será repassado, mas a sua requisição cairá em mar aberto, porque não há nenhuma versão destinada para aquele círculo.
&lt;/div&gt;

&lt;h3&gt;&lt;strong&gt;Exemplo&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Veja o workflow abaixo que mostra como a configuração funciona:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//header-propagation-ptbr-v2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Ao realizar a chamada de um microserviço, o id do círculo que o usuário pertence é obtido por meio do módulo &lt;code&gt;circle-matcher&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;O id é inserido no header de todas as próximas requisições com a chave &lt;strong&gt;&lt;code&gt;X-Circle-Id&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A biblioteca de propagação possibilita repassar o &lt;strong&gt;&lt;code&gt;x-circle-id&lt;/code&gt;&lt;/strong&gt; no header para a chamada de um outro microserviço, no caso o &lt;strong&gt;&lt;code&gt;butler&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;No Charles quando acontece um teste de hipótese no &lt;code&gt;butler&lt;/code&gt;, por exemplo, ele está integrado com o &lt;code&gt;moove&lt;/code&gt;que é o microserviço que atende as requisições do frontend.&lt;/p&gt;
&lt;p&gt;Se você quiser que sua requisição chegue na versão correta do &lt;code&gt;butler&lt;/code&gt;, é preciso que o &lt;strong&gt;&lt;code&gt;moove&lt;/code&gt;&lt;/strong&gt; repasse o header &lt;strong&gt;&lt;code&gt;X-Circle-Id&lt;/code&gt;&lt;/strong&gt; (obtido por meio de uma requisição para o &lt;code&gt;circle-matcher&lt;/code&gt;) nessas requisições feitas para ele. E se envolver mais de um &lt;strong&gt;microserviço,&lt;/strong&gt; é preciso propagar o header para garantir que o usuário tenha a mesma versão daquele círculo.&lt;/p&gt;
&lt;p&gt;Quando acontece um teste no &lt;code&gt;moove&lt;/code&gt; e se ele estiver integrado com o &lt;code&gt;villager&lt;/code&gt; e o &lt;code&gt;butler&lt;/code&gt;, a propagação do header &lt;code&gt;X-Circle-Id&lt;/code&gt; faz com que você procure por versões do &lt;code&gt;villager&lt;/code&gt; e do &lt;code&gt;butler&lt;/code&gt; na mesma versão do &lt;code&gt;moove&lt;/code&gt;, porém como esse não é o cenário, essas requisições entre o &lt;code&gt;moove&lt;/code&gt; e suas integrações serão tratadas pelo mar aberto.&lt;/p&gt;
&lt;h2&gt;Como adicionar?&lt;/h2&gt;
&lt;p&gt;O Charles possui uma biblioteca (lib) que funciona para qualquer aplicação &lt;strong&gt;Java&lt;/strong&gt; que utilize o &lt;strong&gt;Spring&lt;/strong&gt; como framework e outra para &lt;strong&gt;.NET Core.&lt;/strong&gt; As libs foram construídas por não existir nenhuma alternativa amplamente utilizada para esse cenário.&lt;/p&gt;
&lt;p&gt;Para usá-las, você precisa adicioná-las a sua aplicação:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ZupIT/charlescd/tree/master/tracing/spring&#34;&gt;&lt;strong&gt;Lib para Java e Spring&lt;/strong&gt; &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ZupIT/charlescd/tree/master/tracing/dotnet-core%20&#34;&gt;&lt;strong&gt;Lib para .NET&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

O &lt;strong&gt;Node.js&lt;/strong&gt; já possui uma lib, &lt;a href=&#34;https://www.npmjs.com/package/hpropagate&#34;&gt;&lt;strong&gt;veja na página do npm&lt;/strong&gt;&lt;/a&gt;.
&lt;/div&gt;


      </description>
    </item>
    
  </channel>
</rss>
