<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Charles C.D. – Reference</title>
    <link>https://docs.charlescd.io/reference/</link>
    <description>Recent content in Reference on Charles C.D.</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://docs.charlescd.io/reference/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Reference: Circles</title>
      <link>https://docs.charlescd.io/reference/circles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.charlescd.io/reference/circles/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;Circles are the main approach related to the &lt;a href=&#34;https://docs.charlescd.io/faq/circle-deploy-vs-other-deploys/&#34;&gt;&lt;strong&gt;new deploy concept&lt;/strong&gt;&lt;/a&gt; brought by Charles. It enables user group creation with several characteristics and promotes simultaneous application tests for a great number of possible users.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/deploy_em_circulos%20%289%29%20%281%29.png&#34; alt=&#34;Circle generation with Charles deployments&#34;&gt;&lt;/p&gt;
&lt;p&gt;Circles indicate client segmentation and also support the version management created for a specific audience.&lt;/p&gt;
&lt;p&gt;Once the right people are chosen to have access to your release associated with a circle, Charles will generate a[ &lt;strong&gt;series of business or performance metrics&lt;/strong&gt;]
(https://docs.charlescd.io/reference/metrics/charles-metrics/). This information will give you better hypothesis results or even a better view on a feature in analysis and that will enable more assertive tests.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;How to create circles?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;To create a circle, you just have to follow these steps:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Click on Create Circle.&lt;br&gt;
&lt;strong&gt;2.&lt;/strong&gt; Give a name to your circle.&lt;br&gt;
&lt;strong&gt;3.&lt;/strong&gt; Define segmentation.&lt;br&gt;
&lt;strong&gt;4.&lt;/strong&gt; [Optional] Implement a release.&lt;/p&gt;
&lt;h2&gt;What is segmentation?&lt;/h2&gt;
&lt;p&gt;Segmentations are a &lt;strong&gt;subset of characteristics or percentage values&lt;/strong&gt; that you define to put all your users together in a circle. There are three ways to segment your users:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;By filling in information manually&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Through a &lt;strong&gt;CVS file importation&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Through a &lt;strong&gt;percentage value related to the total amount of access to your application&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;strong&gt;Segmentations fields&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Segmentations have the following fields that you have to fill:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Key:&lt;/strong&gt; it is the same value in the user&amp;rsquo;s identify request payload.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conditional:&lt;/strong&gt; it is the logical implication that will condition your key and value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Value:&lt;/strong&gt; they are the values in your base that can be used to make the segmentation logic.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;strong&gt;Key and value&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;The &lt;strong&gt;key&lt;/strong&gt; and &lt;strong&gt;value&lt;/strong&gt; fields are established based on the information that will be sent in the request, which &lt;a href=&#34;https://docs.charlescd.io/reference/circle-matcher/&#34;&gt;&lt;strong&gt;identifies the circles&lt;/strong&gt;&lt;/a&gt; where your user belongs to. For example, the payload below could represent the information you have about a client:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{
  &amp;#34;id&amp;#34;: &amp;#34;7f2926d5-ff08-4d49-96df-d4ba0fc07b52&amp;#34;,
  &amp;#34;name&amp;#34;: &amp;#34;Alice&amp;#34;,
  &amp;#34;state&amp;#34;: &amp;#34;MG&amp;#34;,
  &amp;#34;city&amp;#34;: &amp;#34;Uberlândia&amp;#34;,
  &amp;#34;age&amp;#34;: &amp;#34;47&amp;#34;,
  &amp;#34;groupId&amp;#34;: &amp;#34;a435bd12-ae82-48c8-b164-066d91ffe3a5&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The keys used could be any of the ones sent in your application payload to the Charles&#39; circle-matcher, such as &lt;strong&gt;id&lt;/strong&gt;, &lt;strong&gt;name&lt;/strong&gt;, &lt;strong&gt;state&lt;/strong&gt;, &lt;strong&gt;city&lt;/strong&gt;, &lt;strong&gt;age&lt;/strong&gt; e &lt;strong&gt;groupId&lt;/strong&gt;.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

&lt;strong&gt;Your payload and your keys must be the same.&lt;/strong&gt;
&lt;/div&gt;

&lt;h3&gt;&lt;strong&gt;Percentage&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The segmentation by percentage has the following field:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Percentage&lt;/strong&gt;: value that indicates the percentage (%) of the requests that will be directed to a circle. For example, in a scenario where there is a circle with a percentage of 10% for every 100 requests, approximately 10 will go to the circle.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;The sum of the active circles&#39; factors with segmentation by percentage should never exceed 100.&lt;/p&gt;
&lt;p&gt;If it is equal to 100, it means that the &lt;strong&gt;Default&lt;/strong&gt; circle will never be indicated by the Circle Matcher.&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;This happens only to users that belong to a &lt;strong&gt;Default&lt;/strong&gt; circle, meaning the users belonging to circles with manual or CSV segmentation will never be directed to circles with segmentation by percentage.&lt;/p&gt;
&lt;p&gt;If in your configuration there are circles with segmentation by rules and circles with segmentation by percentage, see the Circle Matcher identification logic below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It verifies if the payload matches some segmentation circle by rules. If it does, these circles will be returned and the circle&amp;rsquo;s search is ended.&lt;/li&gt;
&lt;li&gt;If there isn&amp;rsquo;t any compatible circle and there are active circles with segmentation by percentage, a random number between 1 and 100 is drawn and if it is less than or equal to the circle&amp;rsquo;s factor, this one is returned.&lt;/li&gt;
&lt;li&gt;In case any of the previous steps finds a compatible circle, the &lt;strong&gt;Default&amp;rsquo;s&lt;/strong&gt; circle id is returned.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;strong&gt;Circle creation example&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;See the example on how to create a circle below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/chrome-capture-7-.gif&#34; alt=&#34;How to create a circle&#34;&gt;&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;&lt;strong&gt;The best advantage to use segmentation&lt;/strong&gt; is the possibility to combine logic with several attributes to create different audience categories and, in this way, use them on hypothesis tests.&lt;/p&gt;
&lt;p&gt;For example, using the characteristics ‘profession’ and ‘region’, you are able to create a circle with engineers from the Brazilian north region, another one with engineers from the southeast, and the third one with all Brazilian engineers.&lt;/p&gt;

&lt;/div&gt;

&lt;h3&gt;&lt;strong&gt;Manual segmentation&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;On this kind of segmentation, you define the logic the circle will follow to build a match with predetermined characteristics.&lt;/p&gt;
&lt;p&gt;These characteristics can be defined based on the following logic:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Equal to&lt;/li&gt;
&lt;li&gt;Not Equal&lt;/li&gt;
&lt;li&gt;Lower Than&lt;/li&gt;
&lt;li&gt;Lower or equal to&lt;/li&gt;
&lt;li&gt;Higher than&lt;/li&gt;
&lt;li&gt;Higher or equal to&lt;/li&gt;
&lt;li&gt;Between&lt;/li&gt;
&lt;li&gt;Starts With&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See some examples below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/segmentacao-manual.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Segmentation by CSV importation&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This segmentation is used only in the first CSV column to create rules. The first line in the first column must contain the key name and the same one must be informed on the key field.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/chrome-capture-5-.jpg&#34; alt=&#34;Example of CSV importation&#34;&gt;&lt;/p&gt;
&lt;p&gt;After you have finished the file upload and saved the configuration, an overview will show up demonstrating how your segmentation is:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/image%20%284%29.png&#34; alt=&#34;Overview of CVS importation&#34;&gt;&lt;/p&gt;
&lt;p&gt;This way allows you to extract from an external client’s IDs base, a specific profile and import them directly on Charles. When a .csv file is imported and if it contains some empty lines, it will occur an importation error, because empty segments are not allowed.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

OR is the only logic operator supported on this segmentation.
&lt;/div&gt;

&lt;h3&gt;&lt;strong&gt;Segmentation by percentage&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;It is a kind of segmentation that distributes to the circles the number of requests not filtered in a manual segmentation. These requests are delivered, proportionally between configured circles and the default circle. The value of the percentage for each circle is defined between 0 and 100, and the sum of all active circles cannot exceed 100%.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Segmentation by percentage example&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Suppose you have created two circles with percentage:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Circle &lt;strong&gt;A,&lt;/strong&gt; with 15%.&lt;/li&gt;
&lt;li&gt;Circle &lt;strong&gt;B,&lt;/strong&gt; with 26%.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, the algorithm for identification draws a number between 1 and 100, and after that, it analyzes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If the number is less than or equal to 15, circle &lt;strong&gt;A&lt;/strong&gt; is returned.&lt;/li&gt;
&lt;li&gt;If the number is bigger than 15 and less than or equal to 41 (15 + 26), &lt;strong&gt;circle B&lt;/strong&gt; is returned.&lt;/li&gt;
&lt;li&gt;If the number is bigger than 41, the &lt;strong&gt;Default&lt;/strong&gt; circle is returned.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If there isn&amp;rsquo;t a configured circle or an active one, the available amount will be 100%, like the image below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/perc1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you have, for example, three active circles by percentage and each one of them have a 30% value, the available amount for your new circle will be 10%, see below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/perc2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;After the segmentation is created, the available percentage will be only altered if a new release is deployed for that circle, and then it will become active.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/perc3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;If, for example, the &lt;strong&gt;percentage hits the available 100%&lt;/strong&gt;, it is necessary to change or remove the configured active circles in order to make more space, after that you are able to create a new circle.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/perc4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;How to get my circle&amp;rsquo;s identifier&lt;/strong&gt;?&lt;/h3&gt;
&lt;p&gt;Once your circle is created, even without the configuration, it already has a single identifier.&lt;/p&gt;
&lt;p&gt;To get this information, select the workspace you want, and then on the left menu, click on &lt;strong&gt;Copy ID.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/como-obter-o-identificador-do-meu-circulo%20%281%29.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Active and inactive circles&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The existence of releases defines if a circle is active or not, which are the implemented versions for user segmentation. Therefore, active circles have implemented releases while the inactive circle doesn&amp;rsquo;t have any.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/circulo-ativo-e-inativo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;How to integrate circle with services?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Once the &lt;strong&gt;circle to which the user belongs&lt;/strong&gt; is detected, this information must be passed on to all next requests through the &lt;code&gt;x-circle-id&lt;/code&gt;parameter on the header. Charles detects by the circle’s ID which application version a determined request must be forward. Check out how it works below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/como_integrar_circulos_com_servicos_copy%20%282%29.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;At some point during the interaction of the user and your application &lt;strong&gt;(App1)&lt;/strong&gt;, for example, the login - the &lt;strong&gt;&lt;code&gt;Identify&lt;/code&gt;&lt;/strong&gt; service of &lt;strong&gt;&lt;code&gt;charles-circle-matcher&lt;/code&gt;&lt;/strong&gt; - must be triggered to get the circle.&lt;/p&gt;
&lt;p&gt;By that, the ID must be passed on as a value in the &lt;strong&gt;&lt;code&gt;x-circle-id&lt;/code&gt;&lt;/strong&gt; parameter located on the header of all next requests of your services &lt;strong&gt;(&lt;code&gt;App2&lt;/code&gt;).&lt;/strong&gt; Charles is responsible to disseminate this information because when it&amp;rsquo;s received on Kubernetes, it will be used to redirect the request to a corresponding release version associated with a circle.&lt;/p&gt;
&lt;p&gt;If the &lt;strong&gt;&lt;code&gt;x-circle-id&lt;/code&gt;&lt;/strong&gt; is not passed on, all the requests will be redirected to &lt;strong&gt;Default&lt;/strong&gt; versions, which means it will use the standard releases of your applications, without a specific segmentation.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;A mix of services with different versions of my release&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;We will give an example of a specific scenario where your environment has two services: &lt;strong&gt;Application A&lt;/strong&gt; and &lt;strong&gt;Application B&lt;/strong&gt; and your circles must use the following versions:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/versoes_diferentes_na_minha_release_eng%20%281%29.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;So, the redirect logic using &lt;strong&gt;&lt;code&gt;x-circle-id&lt;/code&gt;&lt;/strong&gt; will be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The user sends to the header:  &lt;code&gt;x-circle-id=&amp;quot;QA Circle&amp;quot;&lt;/code&gt;. In this circle, the request will be redirected to an &lt;strong&gt;X version&lt;/strong&gt; of the service on &lt;strong&gt;Application A&lt;/strong&gt; and the &lt;strong&gt;Y version&lt;/strong&gt; of the service on &lt;strong&gt;Application B&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The user sends to the header:  &lt;code&gt;x-circle-id=”Dev Circle”&lt;/code&gt;. In this circle, the request will be redirected to the &lt;strong&gt;Z version&lt;/strong&gt; of the service on &lt;strong&gt;Application A&lt;/strong&gt; and &lt;strong&gt;Z version&lt;/strong&gt; of the service on &lt;strong&gt;Application B.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/versoes_diferentes_na_minha_release_ii_eng%20%281%29.png&#34; alt=&#34;Example of Application 1 and Application 2&#34;&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;How to route your circles with Kubernetes Clusters?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Charles&lt;/strong&gt; involves &lt;a href=&#34;https://kubernetes.io/docs/home/&#34;&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://istio.io/docs/&#34;&gt;&lt;strong&gt;Istio&lt;/strong&gt;&lt;/a&gt; on traffic routing. Let&amp;rsquo;s think about a scenario where there are two circles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Campinas residents (identify by ID 1234);&lt;/li&gt;
&lt;li&gt;Belo Horizonte&amp;rsquo;s residents (identify by ID 8746).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both circles were implemented with service releases called &lt;strong&gt;&amp;lsquo;application&amp;rsquo;&lt;/strong&gt;, but with different versions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Campinas&#39; residents (1234): version 2, v2.&lt;/li&gt;
&lt;li&gt;Belo Horizonte&amp;rsquo;s residents (8746): version 3, v3.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Besides that, there is a default (v1) version for users that don&amp;rsquo;t fit in any specific circle.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s supposed that, to make a request to identify a user, an ID 8756 is returned. This information will be passed by the next service interaction through the header &lt;code&gt;x-circle-id&lt;/code&gt;. The image below shows how Charles uses the internal resources to route the correct release.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/assets%2F-LzaqMnnQTjZO7P6hApv%2F-M7yHDr-VbK_tS0wCwGh%2F-M7yIFBInQf9HruABKEt%2FScreen_Shot_2020-05-22_at_10.08.35.png?alt=media&amp;amp;token=7b73c615-db6c-438e-a142-e4c131b6d606&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;When performing a version implementation in a circle, Charles makes all the configurations so that the routing is correctly done. To understand better how this works, let&amp;rsquo;s use a scenario where a request comes from the service outside the stack, see the image above.&lt;/p&gt;
&lt;p&gt;The request will be received by Ingress, which performs all the routing control to the service mesh.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Once the request entry is allowed, Virtual Service inquiries the traffic routing rules to be applied on the addressed host. In this case, the evaluation happens through&lt;code&gt;x-circle-id&lt;/code&gt; header specification, in a way that the traffic corresponds to the &lt;strong&gt;application&lt;/strong&gt; service.&lt;/li&gt;
&lt;li&gt;Besides the service, it is also necessary to know which subset is defined on the register. This verification is made on &lt;strong&gt;Destination rules&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The traffic redirect is performed based on previous information until it gets to the service version.&lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;x-circle-id&lt;/code&gt; is not informed, there is a rule defined by Virtual Service that will forward to the default version (v1).&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Reference: Circle Matcher</title>
      <link>https://docs.charlescd.io/reference/circle-matcher/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.charlescd.io/reference/circle-matcher/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;Circle Matcher is a resource that allows you to validate if your &lt;a href=&#34;https://docs.charlescd.io/reference/circles/&#34;&gt;&lt;strong&gt;circles&lt;/strong&gt;&lt;/a&gt; are incoherent segmentations. You can also use it in your applications to determine in which circle your users fit better.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

One good practice is to always make this identification when a user logs in to the application. However, this can be changed according to your business needs.
&lt;/div&gt;

&lt;p&gt;For more information on how to configure your &lt;strong&gt;Circle Matcher in a workspace&lt;/strong&gt;, &lt;a href=&#34;https://docs.charlescd.io/get-started/defining-a-workspace/overview/&#34;&gt;&lt;strong&gt;see Defining Workspace section&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;How the circle identification is made?&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;The application searches all its databases __for circles with the same informed rules in the requests.&lt;/li&gt;
&lt;li&gt;In case there isn&amp;rsquo;t a compatible circle with the informed rules, Circle Matcher verifies if the user will be selected with the segmentation by percentage through its algorithm that uses selection probability.&lt;/li&gt;
&lt;li&gt;To finish, if any circle fits in, Circle Matcher will return the default circle registered.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;strong&gt;Identifying circles through CharlesCD&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Once you start using the interface, it&amp;rsquo;s possible to notice that there are two ways to perform the circle identification. For that, access the &lt;strong&gt;Circles&lt;/strong&gt; menu inside a &lt;strong&gt;workspace&lt;/strong&gt; and select the icon indicated below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/circle-matcher%20%281%29.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The  way to make this validation are:&lt;/p&gt;
&lt;p&gt;You add manually keys and values to define the characteristics of a user test. Based on that, once you run the &lt;strong&gt;Try&lt;/strong&gt;,  &lt;strong&gt;you will receive all the circles related to this user.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/circle-matcher.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

If you pass some information that is off the preconfigured logic conditions in the circles, the system will return indicating that the user is on the &lt;strong&gt;Default&lt;/strong&gt; circle, on the standard version of your application.
&lt;/div&gt;

&lt;h2&gt;&lt;strong&gt;Circle identification through API&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;You can integrate with your applications the &lt;strong&gt;Identify&lt;/strong&gt; resource on the &lt;a href=&#34;https://github.com/ZupIT/charlescd/tree/master/circle-matcher&#34;&gt;&lt;code&gt;charles-circle-matcher&lt;/code&gt;&lt;/a&gt; module to detect the circles the user belongs to.&lt;/p&gt;
&lt;p&gt;For example, considering the use of the parameters below to segment:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/circlematcher-identificacao-de-circulos-atraves-da-api%20%281%29.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once you send the identification request with some information, compatible circles will be returned.&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;POST Identify&lt;/code&gt; &lt;code&gt;https://api.charlescd-circle-matcher.com/identify&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This request used to identify circles based on the user&amp;rsquo;s characteristicsEsta requisição implanta a release composta criada anteriormente em um círculo.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Body Parameters&lt;/strong&gt;: All required:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Key&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;requestData&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;object&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;{ &amp;ldquo;state&amp;rdquo;: &amp;ldquo;NY&amp;rdquo;, &amp;ldquo;profession&amp;rdquo;: &amp;ldquo;Lawyer&amp;rdquo;, &amp;ldquo;age&amp;rdquo;: 46, &amp;ldquo;city&amp;rdquo;: &amp;ldquo;Stony Brook&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;workspaceId&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;String&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;UUID&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{
  &amp;#34;circles&amp;#34;: [
    {
      &amp;#34;id&amp;#34;: &amp;#34;6577ae92-648c-11ea-bc55-0242ac130003&amp;#34;,
      &amp;#34;name&amp;#34;: &amp;#34;NY Lawyers&amp;#34;
    },
    {
      &amp;#34;id&amp;#34;: &amp;#34;6577b112-648c-11ea-bc55-0242ac130003&amp;#34;,
      &amp;#34;name&amp;#34;: &amp;#34;Stony Brook&amp;#39;s Citizens&amp;#34;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As the example above shows, there are circles with the given information of the user, which means that &lt;strong&gt;&lt;code&gt;charlescd-circle-matcher&lt;/code&gt;&lt;/strong&gt; will return a list with all the circles. Here, there are two circles that fit with this description: NY Lawyers e Stony Brook’s Citizens. The order of the circles returned will be by the date of creation, so the newest circle created will be the first of the list.&lt;/p&gt;
&lt;p&gt;The request body is totally flexible, but it&amp;rsquo;s good to remember that the keys must have the same nomenclature defined by segmentation&amp;rsquo;s rules of the circle. See the case below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/circle-matcher-stony-brooks-citizens.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The Stony Brook’s Citizens circle was created to identify users that contain as one of its characteristics the key city and the exact value London. That means that this user won&amp;rsquo;t be listed if you send a request to Identify and inform on the request body the information presented on the example below:&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;POST Identify&lt;/code&gt; &lt;code&gt;https://api.charlescd-circle-matcher.com/identify&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This request implants the release created before in a circle.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Body Parameters&lt;/strong&gt;: All required:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Key&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;requestData&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;object&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;{ &amp;ldquo;age&amp;rdquo;: 46, &amp;ldquo;city&amp;rdquo;: &amp;ldquo;London&amp;rdquo; }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;workspaceId&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;String&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;UUID&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
  &amp;quot;circles&amp;quot;: [
    {
      &amp;quot;id&amp;quot;: &amp;quot;6577ae92-648c-11ea-bc55-0242ac130003&amp;quot;,
      &amp;quot;name&amp;quot;: &amp;quot;Default&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Reference: Users Groups</title>
      <link>https://docs.charlescd.io/reference/users-groups/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.charlescd.io/reference/users-groups/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;A user group can represent a team or even a subset of people based on their skills.&lt;/p&gt;
&lt;p&gt;For example, a big team would have different Charles access permissions according to their job position, you could have these groups:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Product X developers; Desenvolvedores do Produto X.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Product X QAs;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Product X Data Analysts.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, if everyone in a team has the same permission, you are able to create only one group with its users.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Product X Team.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/image%20%283%29%20%282%29.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Permissions for user groups in your workspace&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Charles permissions are given to a user group when you associate them with a workspace.&lt;/p&gt;
&lt;p&gt;The following profiles are available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Maintainer&lt;/strong&gt;: can access and edit all workspace configurations. They can do implementations and create, edit and delete circles and modules.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Developer&lt;/strong&gt;: they have access to do implementations&lt;/p&gt;
&lt;p&gt;and also create, edit and delete circles and modules.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Analyst&lt;/strong&gt;: is able to view modules. They have permission to edit and delete circles and modules. And also view the modules&#39; configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reader&lt;/strong&gt;: is able to view circles and modules.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/chrome-capture-3-%20%282%29.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Permissions map&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;See below the permission given to each profile:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Modules&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Action&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Maintainer&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Developer&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Analyst&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Reader&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Users&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Create&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Edit&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Delete&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;View&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;User Groups&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Create&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Edit&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Delete&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;View&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Workspace&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Create&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Configure&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✔&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Delete&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;View&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✔&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✔&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✔&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Circle&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Create/Edit/Delete&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✔&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✔&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✔&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;View&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✔&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✔&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✔&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;View&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✔&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✔&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✔&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Modules&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Create/Edit/Delete&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✔&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✔&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;View&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✔&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✔&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✔&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Deploy&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Make deployments&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✔&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✔&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Reference: Identity Manager</title>
      <link>https://docs.charlescd.io/reference/identity-manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.charlescd.io/reference/identity-manager/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;On the default installation, you have the option which &lt;strong&gt;Charles manages your users&#39; authentications&lt;/strong&gt; on the platform. However, if you already have an Identity Manager (IDM) and want to use it, just configure it during Charles&#39; installation.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Configuring IDM&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;On&lt;code&gt;charlescd/install/helm-chart/values.yaml&lt;/code&gt;, change the values on the modules:&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;moove&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;internalIdmEnabled: false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;internalIdmEnabled&lt;/code&gt; : Refers whether moove must use the default IDM or not. To inform that you will use an external IDM, add the value&lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;strong&gt;ui&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;authUri: http://charles.info.example/keycloak
isIdmEnabled: &amp;#34;1&amp;#34;
idmLoginUri: /protocol/openid-connect/auth
idmLogoutUri: /protocol/openid-connect/logout
idmRedirectHost: http://charles.info.example
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;authUri&lt;/code&gt;: Stores the base endpoint of your IDM that will make authentication. For example, if you were going to use Google, the value would be:  &lt;a href=&#34;https://accounts.google.com/o/oauth2/v2/auth?&#34;&gt;&lt;code&gt;https://accounts.google.com/o/oauth2/v2/auth?&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isIdmEnabled&lt;/code&gt;: refers if the customized UI will make the authentication. In this case, 0 indicates that it will use the default and 1 a customized IDM.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;idmLoginUri&lt;/code&gt;:  it is your authUri base complement,  it&amp;rsquo;s used to indicate which endpoint will log in.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;idmLogoutUri&lt;/code&gt;:  it is your authUri base complement,  it&amp;rsquo;s used to indicate which endpoint will logout.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;idmRedirectHost&lt;/code&gt;: this field you inform Charles&#39; URL where the user will be redirected right after successful authentication.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;strong&gt;nginx&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;idm:
  endpoint: http://charlescd-keycloak-http/
	port: 443
	path: keycloak/auth/realms/charlescd/.well-known/openid-configuration
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;idm.endpoint:&lt;/code&gt; this field represents the hostname of the IDM that you&amp;rsquo;re using with Charles.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;idm.port:&lt;/code&gt; this field represents the port of the IDM that you&amp;rsquo;re using with Charles.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;idm.path:&lt;/code&gt; this field represents the path that will be used by the envoy to validate your token. For this token validation, Charles uses the openID /userinfo endpoint.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Reference: Registry</title>
      <link>https://docs.charlescd.io/reference/registry/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.charlescd.io/reference/registry/overview/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2&gt;&lt;strong&gt;Why do you have to configure a Registry?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;One of the main points for Charles to work is to know where are the images of your applications. To do this, you are expected to store them in a docker registry and grant access to it.&lt;/p&gt;
&lt;p&gt;Once you make this configuration, Charles is able to read your registry and do some actions like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Validates if the tag you are informing when deploying in a circle is valid;&lt;/li&gt;
&lt;li&gt;During the generation of a release through the board, &lt;code&gt;villager&lt;/code&gt; uses this permission to search for the tag in the registry and ensure that it has been sent and can be used.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Charles is already integrated with some docker registries, choose one and add the information:&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Reference: Azure Container Registry</title>
      <link>https://docs.charlescd.io/reference/registry/azure-container-registry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.charlescd.io/reference/registry/azure-container-registry/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;Enter the data below to grant Charles access to your Azure Container Registry:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; custom name to identify your configuration;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Your registry&amp;rsquo;s URL&lt;/strong&gt;: the URL pattern for your registry is &lt;a href=&#34;https://registry_name.azurecr.io/&#34;&gt;https://&lt;strong&gt;registry-name&lt;/strong&gt;.azurecr.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Username&lt;/strong&gt;: this is the service&amp;rsquo;s entity ID that will be used by Kubernetes to access the registry;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Password&lt;/strong&gt;: service&amp;rsquo;s entity password.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have any doubts about how to proceed or find the information above, you can visit &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/container-registry/container-registry-concepts&#34;&gt;&lt;strong&gt;Azure Container Registry&lt;/strong&gt;&lt;/a&gt; documentation.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

The connection test feature makes sure that the credentials informed are valid.
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Reference: Docker Hub</title>
      <link>https://docs.charlescd.io/reference/registry/docker-hub/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.charlescd.io/reference/registry/docker-hub/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;Enter the data below to grant Charles access to your Docker Hub:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: custom name to identify your configuration;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Your registry&amp;rsquo;s URL:&lt;/strong&gt;  Docker Hub URL (&lt;a href=&#34;https://registry.hub.docker.com/&#34;&gt;&lt;strong&gt;https://registry.hub.docker.com&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;);&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Username:&lt;/strong&gt;  add your &lt;strong&gt;dockerid&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Password:&lt;/strong&gt; your Dockerhub password or access token. See below how to generate one:&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Access your docker account;&lt;/li&gt;
&lt;li&gt;Go to &lt;strong&gt;account settings&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Select the option &lt;strong&gt;Security&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Click on &amp;ldquo;&lt;strong&gt;new access token&amp;rdquo;&lt;/strong&gt; button and copy the generated token.&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

The connection test feature makes sure that the credentials informed are valid.
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Reference: ECR</title>
      <link>https://docs.charlescd.io/reference/registry/ecr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.charlescd.io/reference/registry/ecr/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;Enter the data below to grant Charles access to your Amazon ECR:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: custom name to identify your configuration;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Your registry&amp;rsquo;s URL&lt;/strong&gt;: according to the convention, the URL pattern for your registry is: &lt;a href=&#34;https://aws_account_id.dkr.ecr.region.amazonaws.com&#34;&gt;https://&lt;strong&gt;aws_account_id&lt;/strong&gt;.dkr.ecr.&lt;strong&gt;region&lt;/strong&gt;.amazonaws.com&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Access Key&lt;/strong&gt;: security information generated by AWS IAM;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Secret Key&lt;/strong&gt;: security information generated by AWS IAM;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Region&lt;/strong&gt;: the region where you are located.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have any doubts about how to proceed or find the information above, you can visit &lt;a href=&#34;https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html&#34;&gt;&lt;strong&gt;Amazon ECR&lt;/strong&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html&#34;&gt;&lt;strong&gt;documentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

The connection test feature makes sure that the credentials informed are valid.
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Reference: GCR</title>
      <link>https://docs.charlescd.io/reference/registry/gcr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.charlescd.io/reference/registry/gcr/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;Enter the data below to grant Charles access to your Google Cloud Registry:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: custom name to identify your configuration;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Your registry&amp;rsquo;s URL&lt;/strong&gt;: your GCR&amp;rsquo;s URL like&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; (%20https://gcr.io)&lt;a href=&#34;%20https://gcr.io&#34;&gt;&lt;strong&gt;https://gcr.io&lt;/strong&gt;&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project ID:&lt;/strong&gt; access Google Cloud Platform, select your project and copy the id;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JSON key:&lt;/strong&gt; add the generated JSON key. For more information on &lt;a href=&#34;https://cloud.google.com/container-registry/docs/advanced-authentication#json-key&#34;&gt;&lt;strong&gt;how to generate your JSON key&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have any doubts about how to proceed or find the information above, you can visit &lt;a href=&#34;https://cloud.google.com/container-registry&#34;&gt;&lt;strong&gt;Google Container Registry&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;documentation.&lt;/strong&gt;&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

The connection test feature makes sure that the credentials informed are valid.
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Reference: Releases</title>
      <link>https://docs.charlescd.io/reference/releases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.charlescd.io/reference/releases/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;Releases are application versions. It is different from other ways of deployment that a release generally goes through lots of environments until they reach production. However, with CharlesCD it is possible that the same release will be published for different &lt;a href=&#34;https://docs.charlescd.io/reference/circles/&#34;&gt;&lt;strong&gt;circles&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;How to create releases with Charles?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;See how to create releases with Charles:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Existing images on docker registry.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This one offers the flexibility needed if you want cases in which the generation of artifacts or the development process is apart from CharlesCD.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Releases through existing images on configured Docker Registry&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;To create a release without using the hypothesis board, it is necessary that the Docker images are already available on your &lt;a href=&#34;https://docs.charlescd.io/get-started/defining-a-workspace/docker-registry/&#34;&gt;&lt;strong&gt;configured registry&lt;/strong&gt;&lt;/a&gt; for the module. If this requirement is done, just click on the &lt;a href=&#34;https://docs.charlescd.io/reference/circles/&#34;&gt;&lt;strong&gt;circles&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;&#39;&lt;/strong&gt; option on Charles&#39; menu and select the circle for a release deployment to be created.&lt;/p&gt;
&lt;p&gt;If you are creating the circle at this moment, click on &lt;strong&gt;Insert release&lt;/strong&gt; and then Create release. If the circle is already created, click on &lt;strong&gt;Override release&lt;/strong&gt; and then &lt;strong&gt;Create release&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;On the release creation screen, fill in the name and select one module and its component. On the field beside, all available images on that component will be listed on the registry. Select one and, if it&amp;rsquo;s necessary, add more modules to the release, clicking on &lt;strong&gt;Add module&lt;/strong&gt; and repeat the previous process. When all your modules are registered, click on &lt;strong&gt;deploy&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/releases-por-meio-de-imagens-existentes%20%281%29%20%281%29.gif&#34; alt=&#34;Exemple of release creation by Registry images&#34;&gt;&lt;/p&gt;
&lt;p&gt;After deploying this new release, it will be available to use in other circles, just look into the &amp;lsquo;&lt;strong&gt;Search for existing releases&amp;rsquo;&lt;/strong&gt; option.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Reference: System Token</title>
      <link>https://docs.charlescd.io/reference/system-token/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.charlescd.io/reference/system-token/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2&gt;&lt;strong&gt;What is it?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;A system token is an opaque string of characters that identifies a user or an application. It can be used by integration to call Charles C.D&amp;rsquo;s internal APIs.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

If you want to integrate Charles into your deployment pipeline, &lt;strong&gt;you will need a permission system token&lt;/strong&gt; to execute actions.
&lt;/div&gt;

&lt;p&gt;When you access Charles with the root profile, the &lt;strong&gt;&amp;ldquo;System Token&amp;rdquo;&lt;/strong&gt; item will show up on the menu. This is the token management area where you can create new tokens, view the existing ones, revoke and recreate.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;How can you create?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;To create a system token, you need to fill in three pieces of information:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;strong&gt;name&lt;/strong&gt; to identify the token;&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;workspaces&lt;/strong&gt; it will have access to;&lt;/li&gt;
&lt;li&gt;Which permission &lt;strong&gt;scopes&lt;/strong&gt; the token will be able to work in the workspaces.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;strong&gt;Workspaces&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;You have two options to choose the workspaces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allow the token to have access to all workspaces:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/systemtoken_allworkspace.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select specific workspaces:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/systemtoken_specificworkspace.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Scopes&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The scopes define which actions a token can perform. You can create your token with one or more scopes. To do that, choose the best options below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Modules:&lt;/strong&gt; full access (reading and writing) of the APIs referring to the modules.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Writing&lt;/strong&gt;: access to create, update and delete modules&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reading:&lt;/strong&gt; access to read all modules.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Circles&lt;/strong&gt;: full access (reading and writing) to the APIs referring to the circles.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Writing&lt;/strong&gt;: access to create, update and delete circles.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reading&lt;/strong&gt;: access to read all circles.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deploy:&lt;/strong&gt; full access (reading and writing) to circles release implementation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maintenance:&lt;/strong&gt; full access (reading and writing) to the workspaces&#39; configurations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;strong&gt;How to copy a token?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;After you have finished customizing your token, &lt;strong&gt;don&amp;rsquo;t forget to copy it&lt;/strong&gt;. It is not possible to copy this token again.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/tokensistemico1%20%281%29.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;How can you revoke a token?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;You can revoke the token&amp;rsquo;s permissions, to do that, check out below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Access the token menu;&lt;/li&gt;
&lt;li&gt;Select the token;&lt;/li&gt;
&lt;li&gt;Click on  &lt;strong&gt;&lt;code&gt;Revoke Token&lt;/code&gt;&lt;/strong&gt; option.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;strong&gt;How can you generate a token again?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;If you lost the value of your token, it is possible to create it again with all the existing permissions. When you do that, the previous value is canceled and the new value is the only one valid. Check out the example below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/tokensistemico2%20%281%29.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;On the top menu, click on &amp;ldquo;&lt;strong&gt;Regenerate&lt;/strong&gt;&amp;quot;;&lt;/li&gt;
&lt;li&gt;Confirm the action in the &amp;ldquo;&lt;strong&gt;Yes, regenerate token&amp;rdquo;&lt;/strong&gt; button that will pop up;&lt;/li&gt;
&lt;li&gt;Done! A new token will be generated.&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Reference: Metrics</title>
      <link>https://docs.charlescd.io/reference/metrics/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.charlescd.io/reference/metrics/overview/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2&gt;&lt;strong&gt;What are metrics?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Metrics are indicators that allow you to quantify the performance and the status of the applications based on the analysis of exposed data from the own application and by the infrastructure tools.&lt;/p&gt;
&lt;p&gt;See how to set up your metrics and how to use them below:&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Reference: Setting up your metrics</title>
      <link>https://docs.charlescd.io/reference/metrics/setting-up-your-metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.charlescd.io/reference/metrics/setting-up-your-metrics/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;Charles&#39; metrics configuration is performed on Istio and on your own metrics provider. See more details below.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Istio Configuration&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Metrics related to circle requests are quantified and exposed by Istio, so it&amp;rsquo;s necessary to configure it to get information about each circle.&lt;/p&gt;


&lt;div class=&#34;alert alert-danger&#34; role=&#34;alert&#34;&gt;

The configuration in this section can be done starting with Istio =&amp;gt;1.7 versions.
&lt;/div&gt;

&lt;h2&gt;&lt;strong&gt;Configuring your metrics&#39; tool&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;After you finish your Istio configuration it is necessary to configure your metrics tool.&lt;/p&gt;
&lt;p&gt;See below the details of the tools Charles will be able to read.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Prometheus&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Prometheus is an open-source system for monitoring and alerting toolkit. It is the main monitoring recommendation on &lt;a href=&#34;https://cncf.io/&#34;&gt;&lt;strong&gt;Cloud Native Computing Foundation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

If you want to know more about Prometheus, check out &lt;a href=&#34;https://prometheus.io/&#34;&gt;&lt;strong&gt;Prometheus&#39; documentation&lt;/strong&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;In order for Prometheus to be able to read and store metrics data, you have to configure it.&lt;/p&gt;
&lt;p&gt;To do so, it&amp;rsquo;s necessary to add the job below so it will read Istio&amp;rsquo;s generated metrics. Just configure by editing the &lt;strong&gt;prometheus.yml&lt;/strong&gt; file into your &lt;strong&gt;Prometheus configMap&lt;/strong&gt;.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

It is important to remember that all these configurations consider that your Prometheus is on the same Kubernetes cluster as your Istio and the rest of your applications.
&lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;global&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;scrape_interval&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;15s&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;scrape_timeout&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;10s&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;evaluation_interval&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;15s&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;scrape_configs&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;job_name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;charles-metrics&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;honor_timestamps&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;scrape_interval&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;5s&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;scrape_timeout&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;5s&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metrics_path&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;/v1/metrics&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;scheme&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kubernetes_sd_configs&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;role&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;endpoints&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;namespaces&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;names&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;namespace1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;namespace2&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;relabel_configs&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;separator&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;regex&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;_meta_kubernetes_pod_label(.+)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;replacement&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;labelmap&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;source_labels&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;__meta_kubernetes_pod_label_circleId]&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;separator&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;regex&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;(.*)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;target_label&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;circle_source&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;replacement&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;replace&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;source_labels&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;__meta_kubernetes_pod_label_version]&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;separator&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;regex&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;(.*)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;target_label&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;version&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;replacement&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;replace&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;source_labels&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;__meta_kubernetes_pod_name]&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;separator&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;regex&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;(.*)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;target_label&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;pod_name&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;replacement&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;replace&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;job_name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;kubernetes-pods&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kubernetes_sd_configs&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;role&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;pod&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;relabel_configs&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;keep&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;regex&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;source_labels&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;__meta_kubernetes_pod_annotation_pryometheus_io_scrape&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;replace&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;regex&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;(.+)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;source_labels&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;__meta_kubernetes_pod_annotation_prometheus_io_path&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;target_label&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;__metrics_path__&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;replace&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;regex&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;([^:]+)(?::\d+)?;(\d+)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;replacement&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$1:$2&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;source_labels&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;__address__&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;__meta_kubernetes_pod_annotation_prometheus_io_port&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;target_label&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;__address__      &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;replace&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;source_labels&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;__meta_kubernetes_namespace&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;target_label&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;kubernetes_namespace&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;replace&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;source_labels&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;__meta_kubernetes_pod_label_circleId&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;target_label&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;circle_source&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;replace&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;source_labels&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;__meta_kubernetes_pod_label_component&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;target_label&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;destination_component      &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;replace&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;source_labels&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;__meta_kubernetes_pod_name&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;target_label&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;kubernetes_pod_name&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;drop&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;regex&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Pending|Succeeded|Failed&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;source_labels&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;__meta_kubernetes_pod_phase&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

Change the &lt;strong&gt;namespace&lt;/strong&gt; to the name where your application is deployed.
&lt;/div&gt;



&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

If you want to know more about Prometheus and Kubernetes service discovery,  check out &lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/configuration/configuration/#kubernetes_sd_config&#34;&gt;&lt;strong&gt;their documentation&lt;/strong&gt;&lt;/a&gt;.
&lt;/div&gt;

&lt;h3&gt;&lt;strong&gt;Metadata&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;‌Each metric has a metadata range that allows a variety of filter and analysis types to be created. More metadata was added to Istio and you can see them described in the table below:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Metadata&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;destination_component&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Value on the label &amp;lsquo;app&amp;rsquo; of the pod that received the request or unknown if there is no information about it.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Text&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;circle_source&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Circle label injected into any Kubernetes pods.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Text&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;response_code&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;HTTP status of the response.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Numeric&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;strong&gt;Google Analytics&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Google Analytics is one of the data sources that Charles can connect to read your metrics.&lt;/p&gt;
&lt;p&gt;To be able to use it in your metrics group, you will need&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Google account and the Analytics configured.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

&lt;strong&gt;If you use the free version of Google Analytics, it will begin collecting metrics data only after a period of 24 hours.&lt;/strong&gt;
&lt;/div&gt;

&lt;p&gt;In order for Google Analytics to be able to read and store metrics data, you have to create a Universal Analytics Property.&lt;/p&gt;
&lt;p&gt;Charles uses the Universal Analytics viewId, this is something that Google Analytics 4 no longer supports. When creating a new property be sure to create a Universal Analytics property instead of a GA4 property.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh6.googleusercontent.com/Vp0FcM1MVxuFTXtLnbWC2vvVukPAn3Xfif9hprFBh4cDV8dr6D64Rb4_tzryOwr_f-I0Vvpr6sgx6FL13zKKs-bDQfHByCACx9Ejv1l5Y4t5QfihjYdrQqctZPUyUp4_whQqn3xw&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Google Analytics provides a tag to track the data of your application, just insert the tag in your web application for the data to be collected.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh5.googleusercontent.com/kxknRbNhadC8RM6gjtuiVH0qBMvx9_hUx46JO_ixr48HtreQCGrWpo5_4CIlFLfKCnukYXl7H-rKJcXuktI08nuvPXOdJ2AwndiMryvHef4pzVw_ocnZPJbo0eEllDCq6QUA_Hda&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Metadata&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;‌Each metric has a metadata range that allows a variety of filter and analysis types to be created. More metadata was added to Istio and you can see them described in the table below:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Metadata&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;circle_source&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Circle label injected into any Kubernetes pods.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Text&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If you want to use Charles to analyze your Google Analytics data, you need to add a new metric with your circle ID (&lt;strong&gt;renaming it as circle_source&lt;/strong&gt;) in your metrics label.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

For more information about it, check out &lt;a href=&#34;https://developers.google.com/analytics/devguides/reporting/core/v4&#34;&gt;&lt;strong&gt;Analytics&#39; documentation&lt;/strong&gt;&lt;/a&gt;
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Reference: Metrics group</title>
      <link>https://docs.charlescd.io/reference/metrics/metrics-group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.charlescd.io/reference/metrics/metrics-group/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;The metrics group is a functionality that allows you to register and organize any kind of metrics in a group inside your application. These metrics are related to the &lt;a href=&#34;https://docs.charlescd.io/get-started/defining-a-workspace/datasource/&#34;&gt;&lt;strong&gt;data source you previously registered&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;How to create?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;To create your metrics group, follow the next steps:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; **Step 1:**  Go to the **&amp;quot;Circles&amp;quot;** section, on the left menu and choose the circle  you want to create a new metric group;

 **Step 2:** In **&#39;Add metrics group&#39;**, type the name you want for your group and click on **&#39;Add group&#39;**: 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/criacaogroup%20%281%29.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now you are able to register your metrics**:**&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Click on &amp;lsquo;&lt;strong&gt;Add metric&amp;rsquo;&lt;/strong&gt;  and put the metrics name you want;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Click on &lt;strong&gt;&amp;lsquo;Select a Datasource&amp;rsquo;:&lt;/strong&gt; select your metrics Datasource already registered;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 5:&lt;/strong&gt; Click on &lt;strong&gt;Metric:&lt;/strong&gt;  &lt;strong&gt;Choose one&lt;/strong&gt; and use the &lt;strong&gt;Filter&lt;/strong&gt; option to customize with the value and the conditional you need.  Here is where your Datasource will return the metrics.&lt;/p&gt;
&lt;p&gt;See the example below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/metric+filter%20%281%29.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 6:&lt;/strong&gt; Define a &lt;strong&gt;Threshold&lt;/strong&gt; to establish a limit to your metric.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;&lt;strong&gt;Thresholds&lt;/strong&gt; are predetermined limits that you can configure in Charles. It informs you when one of them reaches the goal.&lt;/p&gt;
&lt;p&gt;For example, if you want to know if your application hits 50 errors, just customize the &lt;strong&gt;threshold&lt;/strong&gt; and you will be notified when you hit this metric.&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/threshold%20%281%29.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;


&lt;div class=&#34;alert alert-success&#34; role=&#34;alert&#34;&gt;

Done! You have registered your metrics group.
&lt;/div&gt;

&lt;p&gt;Now, you can follow up the result with graphics and the available information, as you can see below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/graficos%20%281%29.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Metrics group: Advanced&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;You can customize your own metric with the metrics&#39; group advanced function. This option is for users that already have the knowledge to do queries in the Datasource they are using, it also gives them the power to create any metric possible using that tool.&lt;/p&gt;
&lt;p&gt;Check out the example below, it shows where to use &lt;strong&gt;PromQL&lt;/strong&gt; to build queries in Prometheus, creating a new metric type:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/advanced%20%281%29.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

To see more examples of the advanced mode, check out &lt;a href=&#34;https://docs.charlescd.io/reference/metrics/metric-groups-to-health-monitoring/&#34;&gt;&lt;strong&gt;the metrics group to health monitoring section&lt;/strong&gt;&lt;/a&gt;.
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Reference: Action</title>
      <link>https://docs.charlescd.io/reference/metrics/action/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.charlescd.io/reference/metrics/action/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2&gt;&lt;strong&gt;Adding an action&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;After you have&lt;a href=&#34;https://docs.charlescd.io/get-started/defining-a-workspace/datasource/&#34;&gt; &lt;strong&gt;configured your action&lt;/strong&gt;&lt;/a&gt;, you have to register it in your metrics group and add it to your circle.&lt;/p&gt;
&lt;p&gt;Follow the next steps below to do that:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Access Metrics group;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Select &amp;lsquo;&lt;strong&gt;Add action&lt;/strong&gt;&amp;rsquo; and fill in the fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Type a nickname for action;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Select action type:&lt;/strong&gt; Select the action you have configured before;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Action configuration:&lt;/strong&gt; Configuration to run the chosen plugin.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/adicionando-a-action-correto%20%281%29.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;How does it work?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Actions are triggers that will be triggered when all the predetermined thresholds are reached in a metric group.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.charlescd.io/reference/metrics/metrics-group/&#34;&gt;&lt;strong&gt;Metric groups&lt;/strong&gt;&lt;/a&gt; create metrics you want to track and you can also add actions to this group. When you get to the threshold, the action will be triggered and what is described in your plugin will happen, for example, make deployment of one circle in another circle.&lt;/p&gt;
&lt;p&gt;You can track the action&amp;rsquo;s status in the &amp;lsquo;&lt;strong&gt;Metrics group&lt;/strong&gt;&amp;rsquo; board, check out below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/status-actionsgif.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Reference: Metric groups to health monitoring</title>
      <link>https://docs.charlescd.io/reference/metrics/metric-groups-to-health-monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.charlescd.io/reference/metrics/metric-groups-to-health-monitoring/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2&gt;&lt;strong&gt;What is this?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;When your application is deployed, it’s a good practice to check its health, confirm if the software is working fine or if it needs special care.&lt;/p&gt;
&lt;p&gt;You can do this with Charles, using your &lt;a href=&#34;https://docs.charlescd.io/get-started/defining-a-workspace/datasource/&#34;&gt;&lt;strong&gt;previously configured metrics datasource&lt;/strong&gt;&lt;/a&gt; to create &lt;strong&gt;metric groups&lt;/strong&gt; that will let you know the status of your deployed image.&lt;/p&gt;
&lt;p&gt;See more details below.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Requisites&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;To monitor your metrics you need to have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Datasource configured using &lt;a href=&#34;https://prometheus.io/&#34;&gt;&lt;strong&gt;Prometheus&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/&#34;&gt;&lt;strong&gt;Istio&lt;/strong&gt;&lt;/a&gt; 1.7 or newer versions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;strong&gt;How can you monitor?&lt;/strong&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;You have to create your &lt;strong&gt;metrics group and your own metric,&lt;/strong&gt; to do that follow the &lt;a href=&#34;https://docs.charlescd.io/reference/metrics/metrics-group/&#34;&gt;&lt;strong&gt;steps here&lt;/strong&gt;&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;In the advanced mode, execute &lt;strong&gt;PromQL queries&lt;/strong&gt; to monitor your metrics.&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

To know more about &lt;strong&gt;PromQL,&lt;/strong&gt; check out the &lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/basics/&#34;&gt;&lt;strong&gt;documentation&lt;/strong&gt;&lt;/a&gt;.
&lt;/div&gt;

&lt;h2&gt;&lt;strong&gt;Metrics Examples&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;After you have created your metric group, you can create your own metrics. Check out below some examples&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

When you use these examples, you can create lots of metrics, for example, the proportion of errors by total requests and you can trigger an Action if this metric reach 10%.
&lt;/div&gt;

&lt;h3&gt;&lt;strong&gt;Latency metric&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Here, for example, a metric was created to give you the average of the Latency, dividing the duration (in milliseconds) of requests in the last minute by the total of requests in the same time.&lt;/p&gt;
&lt;p&gt;At the end of the query, the value is multiplied by 1000 and you will get the result in seconds.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

Change the &lt;strong&gt;xyz&lt;/strong&gt; value into your query using the Circle ID value. It&amp;rsquo;s valid for all examples below.
&lt;/div&gt;

&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;round (
 ( sum (
     irate (
       istio_request_duration_milliseconds_sum{circle_source=&amp;quot;xyz&amp;quot;}[1m]
     )
   ) by(destination_component) /
   sum (
     irate (
       istio_request_duration_milliseconds_count{circle_source=&amp;quot;xyz&amp;quot;}[1m]
     )
   ) by(destination_component)
 ) 
   * 1000
)
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

After you have installed Istio and Prometheus and enabled Istio injection on your pods, your Datasource will have Istio metrics. These metrics can be used to build advanced ones. Check out more about this metric on &lt;a href=&#34;https://istio.io/latest/docs/reference/config/metrics/&#34;&gt;&lt;strong&gt;Istio Standard Metrics documentation&lt;/strong&gt;&lt;/a&gt;.
&lt;/div&gt;

&lt;h3&gt;&lt;strong&gt;Total requests metric&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This metric will give you the total of requests at the last minute:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ceil (
  sum (
    irate (
      istio_requests_total{circle_source=&amp;quot;xyz&amp;quot;}[1m]
    )
  ) 
  by(destination_component)
) 
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;strong&gt;Error requests metric&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This metric will give you the requests at the last minute,  but only for response status code 404:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ceil (
  sum (
    irate (
      istio_requests_total{circle_source=&amp;quot;xyz&amp;quot;,
      response_code=&amp;quot;404&amp;quot;}[1m]
    )
  ) 
  by(destination_component)
) 
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

Define a threshold that fills what you need to monitor.
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Reference: Charles&#39; metrics</title>
      <link>https://docs.charlescd.io/reference/metrics/charles-metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.charlescd.io/reference/metrics/charles-metrics/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;Charles offers metrics for you to monitor deploys and circles.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/metrics-circ-e-deplo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Deploy metrics&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Deploy metrics shows a dashboard view with deployment information for you to follow up, such as success or error occurrence numbers and the average implementation time.&lt;/p&gt;
&lt;p&gt;There is other available information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Release name;&lt;/li&gt;
&lt;li&gt;The chosen circle;&lt;/li&gt;
&lt;li&gt;Deploy&amp;rsquo;s date and duration;&lt;/li&gt;
&lt;li&gt;Responsible for the deployment;&lt;/li&gt;
&lt;li&gt;Undeploy cases;&lt;/li&gt;
&lt;li&gt;Modules, components, and used versions;&lt;/li&gt;
&lt;li&gt;Deploy status: Deployed, Deploying, Error, Undeployed, and Undeploying.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See the example below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/deploy.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Circles metrics&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;It is a management feature that helps you view and follow the technical information about your circles.&lt;/p&gt;
&lt;p&gt;The circle metrics allows you to have an overview of your circles on Charles, like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.charlescd.io/reference/circles/&#34;&gt;&lt;strong&gt;Active and inactive&lt;/strong&gt;&lt;/a&gt; circles;&lt;/li&gt;
&lt;li&gt;Circle average lifetime;&lt;/li&gt;
&lt;li&gt;Last update date.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check out below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.charlescd.io/shared/erro.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
