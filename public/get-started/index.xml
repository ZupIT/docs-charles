<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Charles C.D. â€“ Get Started</title><link>http://docs.charlescd.io/v1.0.x/get-started/</link><description>Recent content in Get Started on Charles C.D.</description><generator>Hugo -- gohugo.io</generator><atom:link href="http://docs.charlescd.io/v1.0.x/get-started/index.xml" rel="self" type="application/rss+xml"/><item><title>Get Started: Installing via Single File</title><link>http://docs.charlescd.io/v1.0.x/get-started/installing-charles/installing-via-single-file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.charlescd.io/v1.0.x/get-started/installing-charles/installing-via-single-file/</guid><description>
&lt;hr>
&lt;div class="alert alert-info" role="alert">
Before proceeding, make sure that all the &lt;a href=".././#requirements">&lt;strong>requirements&lt;/strong>&lt;/a> are properly installed.
&lt;/div>
&lt;p>This installation is recommended for those who never used Charles before and just want the &lt;strong>first contact in a testing environment&lt;/strong>, without looking for scalability or security.&lt;/p>
&lt;p>In this case, you will have to:&lt;/p>
&lt;ul>
&lt;li>Use a &lt;strong>yaml&lt;/strong> file with all the &lt;a href="https://docs.charlescd.io/get-started/installing-charles#components">&lt;strong>components&lt;/strong>&lt;/a>;&lt;/li>
&lt;li>Use a &lt;strong>Load Balancer&lt;/strong> previously configured.&lt;/li>
&lt;/ul>
&lt;h3>How to install?&lt;/h3>
&lt;div class="alert alert-danger" role="alert">
This installation uses standard passwords that can be found in our repository. To change them, you have to choose &lt;a href="installing-via-helm">&lt;strong>helm installation&lt;/strong>&lt;/a> where you can make the password change.
&lt;/div>
&lt;p>To create this structure, you have to execute the files in a configured cluster, such as minikube, microk8s, GKE, EKS, etc. The steps to be executed are:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">kubectl create namespace charles
kubectl apply -n charles -f https://raw.githubusercontent.com/ZupIT/charlescd/master/install/helm-chart/single-file.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>At the end of the process, you will have inside of the namespace &lt;code>charles&lt;/code> all the modules of the project and its dependencies installed in a simpler way. Here you will find the&lt;a href="https://raw.githubusercontent.com/ZupIT/charlescd/master/install/helm-chart/single-file.yaml"> &lt;strong>files in the repository&lt;/strong>&lt;/a>.&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;p>If you want to use this installation in a productive or development environment you will probably expose the application using a DNS.&lt;/p>
&lt;p>After doing this, clone the single-file.yaml and change all occurrences from &lt;a href="http://charles.info.example">http://charles.info.example&lt;/a> to &amp;lt;your-dns&amp;gt;, then execute the install command again.&lt;/p>
&lt;p>&lt;code>kubectl install -f &amp;lt;single-file-path&amp;gt; -n charles&lt;/code>&lt;/p>
&lt;/div>
&lt;div class="alert alert-danger" role="alert">
The purpose of this installation is only for tests. Using this for production environment is not recommended due to lack o backup, high availability, etc.
&lt;/div></description></item><item><title>Get Started: Installing via Helm</title><link>http://docs.charlescd.io/v1.0.x/get-started/installing-charles/installing-via-helm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.charlescd.io/v1.0.x/get-started/installing-charles/installing-via-helm/</guid><description>
&lt;hr>
&lt;div class="alert alert-info" role="alert">
Before proceeding, make sure that all the &lt;a href=".././#requirements">&lt;strong>requirements&lt;/strong>&lt;/a> are properly installed.
&lt;/div>
&lt;p>This installation is recommended for those who already has an infrastructure to deal with a more complex environment or who has some limitations of security/scalability, which demands a &lt;strong>more complete install customization&lt;/strong> of CharlesCD.&lt;/p>
&lt;h3>Requisites&lt;/h3>
&lt;p>To run the process, you must have the following programs:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">&lt;strong>Kubectl&lt;/strong>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://helm.sh/docs/intro/install/">&lt;strong>Helm&lt;/strong> &lt;/a>&lt;/li>
&lt;/ul>
&lt;h3>How does it works?&lt;/h3>
&lt;p>This installation is recommended if you want a specific customization. To make this happen, there is a helm template with all the available fields to be altered, including the database and consumed resources. You will find the documentation with the&lt;a href="https://github.com/ZupIT/charlescd/tree/master/install/helm-chart"> &lt;strong>editable fields here&lt;/strong>&lt;/a>.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;p>The passwords used by Charles are stored in the &lt;a href="https://github.com/ZupIT/charlescd/blob/master/install/helm-chart/values.yaml">&lt;strong>values.yaml&lt;/strong>&lt;/a> file. The main passwords to customized are:&lt;/p>
&lt;ul>
&lt;li>butler.database.password&lt;/li>
&lt;li>moove, database.password&lt;/li>
&lt;li>villager.database.password&lt;/li>
&lt;li>circlematcher.redis.password&lt;/li>
&lt;li>keycloak.keycloak.extraEnv.DB_PASSWORD&lt;/li>
&lt;li>postgresql.postgresqlPassword&lt;/li>
&lt;li>redis.password&lt;/li>
&lt;li>compass.database.password&lt;/li>
&lt;/ul>
&lt;p>For more details, access the link mentioned before about editable fields.&lt;/p>
&lt;/div>
&lt;p>To complete the installation with helm charts, just run the command below after you customized the fields:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">// customize everything you need in the file values.yaml before you execute the following command
helm install charlescd &amp;lt;repo-folder&amp;gt; -n &amp;lt;namespace&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-warning" role="alert">
&lt;p>It&amp;rsquo;s important to remember that, in case of no customization at all, the final result is the same as in case #1 in which, for standard, we install the PostgreSQL, Redis, Keycloak and CharlesCD.&lt;/p>
&lt;p>So, you must not forget to customize the fields in case you want something manageable.&lt;/p>
&lt;/div></description></item><item><title>Get Started: Your first Charles' access</title><link>http://docs.charlescd.io/v1.0.x/get-started/installing-charles/your-first-charles-access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.charlescd.io/v1.0.x/get-started/installing-charles/your-first-charles-access/</guid><description>
&lt;hr>
&lt;div class="alert alert-info" role="alert">
At the first access, &lt;strong>regardless of the installation method&lt;/strong>, the default admin user is &lt;strong>charlesadmin@admin&lt;/strong> and the password is &lt;strong>charlesadmin.&lt;/strong>
&lt;/div>
&lt;p>There are three ways to access the application:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Minikube;&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Microk8s;&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Cloud provider.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>See below how the configuration works on each one of them:&lt;/p>
&lt;h2>&lt;strong>1. Minikube&lt;/strong>&lt;/h2>
&lt;p>On the minikube, the &lt;strong>load balancer&lt;/strong> does not automatically create an &lt;strong>external IP,&lt;/strong> to make this possible, follow the steps:&lt;/p>
&lt;p>&lt;strong>Step 1&lt;/strong>: Just run the command below:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">minikube tunnel
// enter your root password, then open another terminal tab and run:
kubectl get svc -n charles
// now the nginx IP external appears
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Step 2:&lt;/strong> Now that you have the &lt;strong>external ip,&lt;/strong> &lt;strong>replace the ip-external-charles&lt;/strong> and add this line on your host file:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">&amp;lt;IP-EXTERNAL-CHARLES&amp;gt; charles.info.example
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-info" role="alert">
For more information on &lt;strong>how to change the host file,&lt;/strong> &lt;a href="https://www.howtogeek.com/howto/27350/beginner-geek-how-to-edit-your-hosts-file/">&lt;strong>access here.&lt;/strong> &lt;/a>
&lt;/div>
&lt;p>&lt;strong>Step 3:&lt;/strong> In your browser type &lt;strong>&lt;a href="http://charles.info.example">http://charles.info.example&lt;/a>&lt;/strong> and the entire application is available.&lt;/p>
&lt;h2>2. Microk8s&lt;/h2>
&lt;p>Microk8s is available for Microsoft Windows, Apple MacOS and Linux platforms.&lt;/p>
&lt;div class="alert alert-info" role="alert">
For more information on how to install Microk8s visit the &lt;a href="https://microk8s.io/">&lt;strong>project&amp;rsquo;s website&lt;/strong>&lt;/a>
&lt;/div>
&lt;p>Once Microk8s is installed, you have to enable the following add-ons:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>DNS:&lt;/strong> discovery of services within the cluster;&lt;/li>
&lt;li>&lt;strong>Storage:&lt;/strong> creating volumes and persistence of PODs;&lt;/li>
&lt;li>&lt;strong>MetalLB:&lt;/strong> access to the services exposed by kubernetes - For this addon, you will have to choose a range of IPs where Load Balancer will assign for the exposure of its services.&lt;/li>
&lt;/ul>
&lt;p>Follow the next steps to enable Microk8s on Charles:&lt;/p>
&lt;p>&lt;strong>Step 1:&lt;/strong> prepare Microk8s to receive the CharlesCD;&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">microk8s enable dns storage metallb
Enabling DNS
Applying manifest
serviceaccount/coredns created
configmap/coredns created
deployment.apps/coredns created
service/kube-dns created
clusterrole.rbac.authorization.k8s.io/coredns created
clusterrolebinding.rbac.authorization.k8s.io/coredns created
Restarting kubelet
DNS is enabled
Enabling default storage class
deployment.apps/hostpath-provisioner created
storageclass.storage.k8s.io/microk8s-hostpath created
serviceaccount/microk8s-hostpath created
clusterrole.rbac.authorization.k8s.io/microk8s-hostpath created
clusterrolebinding.rbac.authorization.k8s.io/microk8s-hostpath created
Storage will be available soon
Enabling MetalLB
Enter each IP address range delimited by comma
(e.g. &amp;#39;10.64.140.43-10.64.140.49,192.168.0.105-192.168.0.111&amp;#39;):
// In this step, you can choose a range or use the suggested one, we will use
// 10.64.140.43-10.64.140.49
10.64.140.43-10.64.140.49
Applying registry manifest
namespace/metallb-system created
podsecuritypolicy.policy/speaker unchanged
serviceaccount/controller created
serviceaccount/speaker created
clusterrole.rbac.authorization.k8s.io/metallb-system:controller unchanged
clusterrole.rbac.authorization.k8s.io/metallb-system:speaker unchanged
role.rbac.authorization.k8s.io/config-watcher created
clusterrolebinding.rbac.authorization.k8s.io/metallb-system:controller unchanged
clusterrolebinding.rbac.authorization.k8s.io/metallb-system:speaker unchanged
rolebinding.rbac.authorization.k8s.io/config-watcher created
daemonset.apps/speaker created
deployment.apps/controller created
configmap/config created
MetalLB is enabled
// With microk8s configured, we can then install Charles using
// the single-file
microk8s.kubectl create namespace charles
â€‹â€‹microk8s.kubectl apply -n charles -f https://raw.githubusercontent.com/ZupIT/charlescd/master/install/helm-chart/single-file.yaml
// now the nginx IP external appears
microk8s.kubectl get svc -n charles
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Passo 2:&lt;/strong> now that you have the &lt;strong>external ip,&lt;/strong> &lt;strong>replace the ip-external-charles,&lt;/strong> add this line on your OS host file:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">&amp;lt;IP-EXTERNAL-CHARLES&amp;gt; charles.info.example
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-info" role="alert">
For more information on &lt;strong>how to change the host file,&lt;/strong> &lt;a href="https://www.howtogeek.com/howto/27350/beginner-geek-how-to-edit-your-hosts-file/">&lt;strong>access here.&lt;/strong> &lt;/a>
&lt;/div>
&lt;p>&lt;strong>Step 3:&lt;/strong> type in your browser &lt;strong>&lt;a href="http://charles.info.example">http://charles.info.example&lt;/a>&lt;/strong> and the entire application will be available.&lt;/p>
&lt;h2>&lt;strong>3. Cloud Provider (AWS, GCP, AZURE)&lt;/strong>&lt;/h2>
&lt;p>On Cloud Provider, if you install on a managed kubernetes, &lt;strong>the external ip for the nginx load balancer is created automatically&lt;/strong>,&lt;/p>
&lt;p>When all the components are ready follow the next steps:&lt;/p>
&lt;p>&lt;strong>Step 1:&lt;/strong> Just take the external IP with the command below and add it to your hosts file.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">kubectl get svc -n charles
// get external IP value
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Step 2:&lt;/strong> Add the line below in you &lt;a href="https://www.howtogeek.com/howto/27350/beginner-geek-how-to-edit-your-hosts-file/">&lt;strong>OS host file&lt;/strong>&lt;/a>, if you want to access the browser in your device.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">&amp;lt;IP-EXTERNAL-CHARLES&amp;gt; charles.info.example
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-info" role="alert">
&lt;p>If you want to use this installation in a productive or development environment you will probably expose the application using a DNS.&lt;/p>
&lt;p>After doing this, clone the configurations (it can be singlefile or the helm files) and change all occurrences from &lt;a href="http://charles.info.example">http://charles.info.example&lt;/a> to your new DNS, then run the install command again.&lt;/p>
&lt;/div>
&lt;div class="alert alert-danger" role="alert">
The purpose of this installation is only for tests. Using this for production environment is not recommended due to lack o backup, high availability, etc.
&lt;/div></description></item><item><title>Get Started: Authentication with private registry</title><link>http://docs.charlescd.io/v1.0.x/get-started/optional-configuration/authentication-with-private-registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.charlescd.io/v1.0.x/get-started/optional-configuration/authentication-with-private-registry/</guid><description>
&lt;hr>
&lt;h2>Why do you need to authenticate?&lt;/h2>
&lt;p>Authentication is required if you use a private registry. This way, the cluster will be able to communicate with your registry to pull the images.&lt;/p>
&lt;h2>How do you authenticate?&lt;/h2>
&lt;p>Kubernetes cluster uses a type of docker-registry &lt;strong>Secret&lt;/strong> to authenticate the registry container. You have to generate it.&lt;/p>
&lt;div class="alert alert-info" role="alert">
For more information on how to generate the Secret that will be applied in your cluster, &lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/">&lt;strong>access Kubernetes documentation&lt;/strong>&lt;/a>.
&lt;/div>
&lt;p>Once you generate the secret, it will look like:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">apiVersion: v1
data:
.dockerconfigjson: &amp;lt;&amp;lt;your value&amp;gt;&amp;gt;
kind: Secret
metadata:
name: &amp;lt;&amp;lt;registry-name&amp;gt;&amp;gt;
type: kubernetes.io/dockerconfigjson
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After this, you&amp;rsquo;ll need to apply this information in the namespace where your applications will be deployed by Charles:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">kubectl -n your-namespace apply secret-registry.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After completing these steps, your cluster will be able to maintain communication with the registry.&lt;/p></description></item><item><title>Get Started: Configuring your ingress</title><link>http://docs.charlescd.io/v1.0.x/get-started/optional-configuration/configuring-your-ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.charlescd.io/v1.0.x/get-started/optional-configuration/configuring-your-ingress/</guid><description>
&lt;hr>
&lt;p>If you want to use your own ingress instead the one provided with Charles' installation, follow the next step:&lt;/p>
&lt;ul>
&lt;li>On&lt;code>charlescd/install/helm-chart/values.yaml&lt;/code>, change the &lt;strong>&lt;code>enabled&lt;/code>&lt;/strong> value to &lt;strong>&lt;code>false&lt;/code>&lt;/strong>, like the example below:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">host: charles.info.example
class: nginx
controller:
nginx:
enabled: false
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Get Started: Defining the Identity Manager</title><link>http://docs.charlescd.io/v1.0.x/get-started/optional-configuration/defining-the-identity-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.charlescd.io/v1.0.x/get-started/optional-configuration/defining-the-identity-manager/</guid><description>
&lt;hr>
&lt;h3>What is Identity Manager (IDM)?&lt;/h3>
&lt;p>It is responsible to manage the user identity that will access any application, in this case, Charles.&lt;/p>
&lt;div class="alert alert-info" role="alert">
When a user access Charles, it is verified which manager was configured during the installation, to make an identity validation of the user.
&lt;/div>
&lt;p>On the example below, you can see a flow where there is a verification of what configuration was made to manage the users. In this case, when a user tries to access Charles and it is not yet authenticated, if an customized IDM has been configurated, for example, Google, the user will be redirected to Google&amp;rsquo;s page to proceed the authentication. If this is not the scenario, Charles authentication screen is returned to continue the flow.&lt;/p>
&lt;p>&lt;img src="//untitled-diagram-1-.png" alt="">&lt;/p>
&lt;h3>Why configure an IDM?&lt;/h3>
&lt;p>It is necessary to have an identity manager to make sure Charle&amp;rsquo;s accesses are safe. For this, Charles offers two options:&lt;/p>
&lt;h3>Default IDM&lt;/h3>
&lt;p>On Charles default installation, it already has Keycloak that it is used to manage the users. If you don&amp;rsquo;t have a customized IDM, you can use this one.&lt;/p>
&lt;h3>External IDM&lt;/h3>
&lt;p>In case you already have your own identity manager, it is necessary change some installation variables. For that, follow the instruction on &lt;a href="../../../reference/identity-manager">&lt;strong>reference section.&lt;/strong>&lt;/a>&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;p>There are some blocked flows when using an external IDM, see below:&lt;/p>
&lt;ul>
&lt;li>Create users;&lt;/li>
&lt;li>Change password;&lt;/li>
&lt;li>Reset password;&lt;/li>
&lt;li>Delete users.&lt;/li>
&lt;/ul>
&lt;/div></description></item><item><title>Get Started: Docker registry</title><link>http://docs.charlescd.io/v1.0.x/get-started/defining-a-workspace/docker-registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.charlescd.io/v1.0.x/get-started/defining-a-workspace/docker-registry/</guid><description>
&lt;hr>
&lt;div class="alert alert-warning" role="alert">
This is mandatory information.
&lt;/div>
&lt;p>One of the steps to configure your workspace is to inform Charles which docker registry you store your application&amp;rsquo;s images. This access is important because CharlesCD can watch newly generated images and list the ones already saved in your registry to deploy them in circles.&lt;/p>
&lt;p>Charles is already integrated with some docker registries, choose one and add the information:&lt;/p></description></item><item><title>Get Started: Deploy environment</title><link>http://docs.charlescd.io/v1.0.x/get-started/defining-a-workspace/deploy-environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.charlescd.io/v1.0.x/get-started/defining-a-workspace/deploy-environment/</guid><description>
&lt;hr>
&lt;p>It is necessary to register cluster &lt;a href="https://kubernetes.io">&lt;strong>Kubernetes&lt;/strong>&lt;/a> credentials to configure your workspace. These are specific configurations to each Continuous Deployment (CD) tool that is integrated with Charles. At the moment, the Charles has a native deploy or you can integrate with &lt;a href="https://www.spinnaker.io/">&lt;strong>Spinnaker&lt;/strong>&lt;/a>.&lt;/p>
&lt;div class="alert alert-info" role="alert">
Charles has a module called &lt;strong>Octopipe&lt;/strong> that is light and low cost way to make cluster Kubernetes deploys.
&lt;/div>
&lt;h3>How to make your deploy?&lt;/h3>
&lt;p>See below the example on how to perform your deploy using &lt;strong>CharlesCD&lt;/strong> in the same installation cluster:&lt;/p>
&lt;ol>
&lt;li>Click on &lt;strong>Add CD Configuration&lt;/strong>;&lt;/li>
&lt;li>Select the option &lt;strong>CharlesCD.&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>After these steps, fill out the next fields:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Name:&lt;/strong> configuration name that will be created;&lt;/li>
&lt;li>&lt;strong>Namespace:&lt;/strong> Define the namespace that will be used on Kubernetes cluster deploys;&lt;/li>
&lt;li>&lt;strong>Git provider&lt;/strong>: Define the git provider (&lt;strong>GitHub&lt;/strong> or &lt;strong>GitLab&lt;/strong>);&lt;/li>
&lt;li>&lt;strong>Git token:&lt;/strong> insert an authentication token that has access to the git repository where your &lt;a href="../../creating-your-first-module/how-to-configure-chart-template">&lt;strong>Helm templates&lt;/strong>&lt;/a> are stored (they will be used during the deployment of your &lt;a href="../../creating-your-first-module/">&lt;strong>application&lt;/strong>&lt;/a>). If your Git Provider is &lt;strong>GitHub&lt;/strong>, &amp;ldquo;&lt;em>repo&lt;/em>&amp;rdquo; permission is required. Otherwise, configure the accesses in &lt;strong>GitLab&lt;/strong>:&amp;quot;&lt;em>api&lt;/em> &amp;quot; and &amp;ldquo;&lt;em>read_repository&lt;/em>&amp;rdquo;.&lt;/li>
&lt;li>Select the &lt;strong>Default&lt;/strong> option.&lt;/li>
&lt;/ol>
&lt;p>After finishing your configuration, you can associate it with a module later. For more information, check the &lt;a href="https://docs.charlescd.io/reference/cd-configuration">&lt;strong>CD Configuration&lt;/strong>&lt;/a> page.&lt;/p></description></item><item><title>Get Started: Circle Matcher</title><link>http://docs.charlescd.io/v1.0.x/get-started/defining-a-workspace/circle-matcher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.charlescd.io/v1.0.x/get-started/defining-a-workspace/circle-matcher/</guid><description>
&lt;hr>
&lt;h2>Why do you have to configure?&lt;/h2>
&lt;p>When &lt;a href="../../.././">&lt;strong>creating a workspace&lt;/strong>&lt;/a>, you have to inform Charles to which Circle Matcher that current workspace will point to. It is possible that there is a Circle Matcher for each environment, since Charles can handle, at the same time, different environments in multiple workspaces.&lt;/p>
&lt;p>Circle Matcher is a independent module, despite that, it is possible to install it in any area you want inside its architecture, for example, a public cluster.&lt;/p>
&lt;p>This configuration is necessary, so you are able to perform operations in Charles, like creating and editing segments in a circle.&lt;/p>
&lt;div class="alert alert-info" role="alert">
It is important to remember, on Charle&amp;rsquo;s context, the Circle Matcher module receives most of the environment&amp;rsquo;s request, because it is the application that identifies the user based on the rules that you have configured while managing a circle.
&lt;/div>
&lt;p>If you want to know more about &lt;strong>Circle Matcher&lt;/strong>, see the &lt;a href="../../../../reference/circle-matcher">&lt;strong>References section&lt;/strong>&lt;/a>.&lt;/p>
&lt;h2>How must be configured&lt;/h2>
&lt;h4>Option 1: Configure Circle Matcher in a separate architecture&lt;/h4>
&lt;p>You have to configure the public DNS that points to your desired Circle Matcher.&lt;/p>
&lt;blockquote>
&lt;p>Example: &lt;strong>&lt;a href="http://charles.info.example/charlescd-circle-matcher">http://charles.info.example/charlescd-circle-matcher&lt;/a>&lt;/strong>.&lt;/p>
&lt;/blockquote>
&lt;h4>Option 2: Configure Circle Matcher in the same Charles' namespace&lt;/h4>
&lt;p>If you want to use Circle Matcher in the same namespace that Charles is installed, you can use the same DNS reference.&lt;/p>
&lt;p>The difference is in terms of performance, it is recommended to use Kubernetes service name.&lt;/p>
&lt;blockquote>
&lt;p>Example: &lt;strong>http://charlescd-circle-matcher:8080&lt;/strong>.&lt;/p>
&lt;/blockquote>
&lt;h2>Next steps&lt;/h2>
&lt;p>On this section, you saw how to create your Circle Matcher. To continue your workspace configuration, Charles offers metrics that need to be configured.&lt;/p>
&lt;p>ðŸ‘‰ Go to &lt;a href="../../../reference/metrics/setting-up-your-metrics">&lt;strong>Setting up your metrics&lt;/strong> &lt;/a>and find out how Charles uses metrics.&lt;/p></description></item><item><title>Get Started: Git credentials</title><link>http://docs.charlescd.io/v1.0.x/get-started/defining-a-workspace/git-credentials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.charlescd.io/v1.0.x/get-started/defining-a-workspace/git-credentials/</guid><description>
&lt;hr>
&lt;p>While you are configuring your workspace, you need to register on Git, to grant access to your repositories. This access is important because Charles will be able to create, delete and merge branches during the hypothesis board use, and it is also possible to view and create releases.&lt;/p>
&lt;h3>How to configure?&lt;/h3>
&lt;p>There are two register categories: GitHub and GitLab. To configure it, add the following information:&lt;/p>
&lt;h3>&lt;strong>GitHub&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: this name will be used by your Charles configuration.&lt;/li>
&lt;li>&lt;strong>URL&lt;/strong>: if you have a custom domain, add it here. If you don&amp;rsquo;t, add a pattern value here &lt;a href="https://github.com">https://github.com&lt;/a> (without the trailing &amp;ldquo;/&amp;quot;).&lt;/li>
&lt;li>&lt;strong>Token&lt;/strong>: when &lt;a href="https://help.github.com/pt/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line">&lt;strong>this token&lt;/strong>&lt;/a> is generated, it needs to have all access to the &lt;strong>&amp;ldquo;repo&amp;rdquo;&lt;/strong> item.&lt;/li>
&lt;/ul>
&lt;h3>&lt;strong>GitLab&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong>: this name will be used by your Charles configuration.&lt;/li>
&lt;li>&lt;strong>URL&lt;/strong>: if you have a custom domain, add it here. If you don&amp;rsquo;t, add a pattern value here &lt;a href="https://gitlab.com/">https://gitlab.com&lt;/a> (without the trailing &amp;ldquo;/&amp;quot;).&lt;/li>
&lt;li>&lt;strong>Token&lt;/strong>: check out GitLab&amp;rsquo;s documentation&lt;a href="https://docs.gitlab.com/ee/api/#personalproject-access-tokens"> &lt;strong>on how to create a token&lt;/strong>&lt;/a> It&amp;rsquo;s important to highlight that the token needs to have the following accesses: &amp;ldquo;&lt;strong>api&amp;rdquo;&lt;/strong> and &lt;strong>&amp;ldquo;read_repository&amp;rdquo;.&lt;/strong>&lt;/li>
&lt;/ul></description></item><item><title>Get Started: Datasource</title><link>http://docs.charlescd.io/v1.0.x/get-started/defining-a-workspace/datasource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.charlescd.io/v1.0.x/get-started/defining-a-workspace/datasource/</guid><description>
&lt;hr>
&lt;p>In order to quatify your application&amp;rsquo;s performances and follow up its status, Charles offers two types of Datasource: Prometheus and Google Analytics.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
Before you add the Datasource, it is necessary to finish your &lt;a href="../../../reference/metrics/setting-up-your-metrics">&lt;strong>metrics configuration&lt;/strong>&lt;/a>.
&lt;/div>
&lt;h3>How to configure?&lt;/h3>
&lt;p>You have to follow the next steps:&lt;/p>
&lt;ol>
&lt;li>Click on your name, on the botton left corner and then select &lt;strong>Settings&lt;/strong>.;&lt;/li>
&lt;li>Click on &lt;strong>Credentials;&lt;/strong>&lt;/li>
&lt;li>Click on &lt;strong>Add Datasource;&lt;/strong>&lt;/li>
&lt;li>Select your &lt;strong>tool option, Prometheus&lt;/strong> or &lt;strong>Google Analytics;&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Data source health:&lt;/strong> this option gives you more details about your circle&amp;rsquo;s health;&lt;/li>
&lt;li>Make the configuration based on the selected tool.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="//datasource.gif" alt="">&lt;/p></description></item><item><title>Get Started: Metrics actions</title><link>http://docs.charlescd.io/v1.0.x/get-started/defining-a-workspace/metrics-actions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.charlescd.io/v1.0.x/get-started/defining-a-workspace/metrics-actions/</guid><description>
&lt;hr>
&lt;h2>What is it?&lt;/h2>
&lt;p>After you had &lt;a href="../../../../../reference/metrics/metrics-group">&lt;strong>register your metrics group&lt;/strong>&lt;/a>, Charles follows up and offers actions for each one of them.&lt;/p>
&lt;h2>How to configure?&lt;/h2>
&lt;p>In workspace configuration, click on the section &lt;strong>Add Metric Action&lt;/strong> and follow the steps:&lt;/p>
&lt;p>&lt;strong>1. Add action configuration&lt;/strong>: add a configuration action;&lt;br>
&lt;strong>2. Type a nickname:&lt;/strong> writer a name for your action;&lt;br>
&lt;strong>3. Type a description:&lt;/strong> describe the action;&lt;br>
&lt;strong>4. Select a plugin:&lt;/strong> select a plugin to run the action.&lt;/p>
&lt;p>&lt;img src="//usandoactions-metricas%20%282%29.gif" alt="">&lt;/p>
&lt;div class="alert alert-info" role="alert">
The only available plugin so far is &lt;strong>circle deployment&lt;/strong>. Charles allows you to make your own plugin, the way you want and to fulfill your application&amp;rsquo;s purpose, for example, an action that sends an email to warn your circle status.
&lt;/div>
&lt;h3>Adding an action&lt;/h3>
&lt;p>After you have configured your action, you have to register in your metrics group and add it to your circle. To do that:&lt;/p>
&lt;ol>
&lt;li>Access Metrics group;&lt;/li>
&lt;li>Select &amp;lsquo;&lt;strong>Add action&lt;/strong>&amp;rsquo; and fill the fields:
&lt;ol>
&lt;li>&lt;strong>Type a nickname for action:&lt;/strong> Select the name of your action;&lt;/li>
&lt;li>&lt;strong>Select action type:&lt;/strong> Select the action you have configured before;&lt;/li>
&lt;li>&lt;strong>Action configuration:&lt;/strong> Configuration to run the chosen plugin.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="//adicionando-a-action-correto%20%281%29.gif" alt="">&lt;/p>
&lt;h3>How does it work?&lt;/h3>
&lt;p>Inside your circle you register the &lt;a href="../../reference/metrics/metrics-group">&lt;strong>metrics group&lt;/strong>&lt;/a>, which it is responsible to create metrics that you want to track and you can also add action to this group. When you get to the threshold, the action will be triggered and what it is described in your plugin will happen, like for example, make a deploy of one circle in another circle.&lt;/p>
&lt;p>You can track the action&amp;rsquo;s status in the &amp;lsquo;Metrics group&amp;rsquo; board, see below:&lt;/p>
&lt;p>&lt;img src="//status-actionsgif.gif" alt="">&lt;/p></description></item><item><title>Get Started: How to configure Chart template</title><link>http://docs.charlescd.io/v1.0.x/get-started/creating-your-first-module/how-to-configure-chart-template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.charlescd.io/v1.0.x/get-started/creating-your-first-module/how-to-configure-chart-template/</guid><description>
&lt;hr>
&lt;h2>What is Helm?&lt;/h2>
&lt;p>Helm Charts is a package manager that allows you to define, install and update Kubernetes applications, regardless the complexity.&lt;/p>
&lt;p>On Charles context, &lt;a href="https://helm.sh/docs/chart_template_guide/getting_started/">&lt;strong>Chart Template&lt;/strong>&lt;/a> is used like a file collection related to the Kubernetes configuration.&lt;/p>
&lt;div class="alert alert-info" role="alert">
If you haven&amp;rsquo;t configured your module yet, &lt;a href=".././">&lt;strong>access here&lt;/strong>&lt;/a> It is important to remember, you have to register the URL in this module.
&lt;/div>
&lt;h2>How to configure the chart template?&lt;/h2>
&lt;p>Follow the next steps to try out our sample app.&lt;/p>
&lt;h3>&lt;strong>Step 1: create a chart template directory&lt;/strong>&lt;/h3>
&lt;p>To start, you need to save your templates in any git repository you want. When you create a new chart template, you must give the directory the same name as the component as it refers to.&lt;/p>
&lt;p>The structure below has the necessary templates to deploy a module that contains a component called &amp;ldquo;circles-sample&amp;rdquo;, it is available here.&lt;/p>
&lt;p>The image below shows how your directory must look like:&lt;/p>
&lt;p>&lt;img src="//screen-shot-2020-08-13-at-09.16.04.png" alt=" Chart template directory of circle-sample">&lt;/p>
&lt;h3>Step 2: configure the directory items&lt;/h3>
&lt;p>After you have created the directory, now you have to configure it. See below which files are necessary to configure:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>templates/&lt;/strong> : it has the models.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>deployment.yaml:&lt;/strong> describes the &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/">&lt;strong>deployment&lt;/strong>&lt;/a> structure.&lt;/li>
&lt;li>&lt;strong>service.yaml:&lt;/strong> describes the &lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/">&lt;strong>service&lt;/strong>&lt;/a> structure.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>The &lt;strong>Chart.yaml&lt;/strong> file contains the descriptions as version, name, description. It is necessary to define the version as &amp;ldquo;darwin&amp;rdquo;.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;strong>circles-sample.yaml&lt;/strong> file has the values that it will be used in the templates.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>This information Charles needs to have on the templates. It is important to remember that you can customize these templates the way you want it.&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;p>After you have configured your directory according to the structure above, go to the &amp;ldquo;circles-samples&amp;rdquo; folder and run the command &lt;strong>&amp;quot;&lt;code>helm package .&lt;/code>&amp;quot;&lt;/strong>.&lt;/p>
&lt;p>In the end of this command, you will have a &lt;strong>tgz&lt;/strong> file with the circles-samples-darwin name. Our CD tool looks for this &lt;strong>tgz&lt;/strong> to run the template.&lt;/p>
&lt;/div></description></item><item><title>Get Started: Configuring your module</title><link>http://docs.charlescd.io/v1.0.x/get-started/creating-your-first-module/configuring-your-module/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.charlescd.io/v1.0.x/get-started/creating-your-first-module/configuring-your-module/</guid><description>
&lt;hr>
&lt;h2>Why configure it?&lt;/h2>
&lt;p>The module configuration is necessary because when you work in a scenario with multiple microservices, you need to make sure to &lt;a href="../../../../reference/circles#how-to-integrate-circle-with-services">&lt;strong>propagate the header &lt;code>X-Circle-Id&lt;/code> that ensures the requests are being redirected to the right version of your application&lt;/strong>&lt;/a>. This way, you make it possible for your base user to get on the same version of all microservice that are part of your hypothesis test.&lt;/p>
&lt;p>For example, when you test a feature between microservices that have integration in an account opening flow, it is necessary to make sure your user will get in all correct versions that are on your hypothesis test created for this specific flow.&lt;/p>
&lt;p>This process is made by a library to propagate the header &lt;code>X-Circle-Id&lt;/code>, that makes the circle id to pass all the requests inside the microservice mesh, making sure that you get to the &lt;a href="../../../reference/circle-matcher#identify">&lt;strong>correct version of you hypothesis test&lt;/strong>&lt;/a>.&lt;/p>
&lt;div class="alert alert-info" role="alert">
If there is a microservice inside this flow that doesn&amp;rsquo;t make part of your test, the circle value will be passed, but your request will fall into the open sea, because there isn&amp;rsquo;t any version for that circle.
&lt;/div>
&lt;h3>&lt;strong>Example&lt;/strong>&lt;/h3>
&lt;p>See below:&lt;/p>
&lt;p>&lt;img src="//header-propagation-v2-en.png" alt="">&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>When you make a microservice request, &lt;code>circle matcher&lt;/code> gets the circle id for this specific request.&lt;/li>
&lt;li>The id is inserted in the header with the &lt;code>X-Circle-Id&lt;/code> key.&lt;/li>
&lt;li>The propagate header library makes it possible to pass the &lt;code>x-circle-id&lt;/code> in the header to request to another microservice, in this case &lt;code>butler&lt;/code>.&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>When a hypothesis test happens on &lt;code>butler&lt;/code>, for example, it is integrated with &lt;code>moove&lt;/code> which is a microservice that answers the requests on the frontend.&lt;/p>
&lt;p>If you want your request to get to the &lt;code>butler&lt;/code> correct version, it is necessary that &lt;code>moove&lt;/code> pass the &lt;code>x-Circle-Id&lt;/code> header (obtained by circle matcher) in the requests made for it. If involves more than one &lt;strong>microservice&lt;/strong>, you have to propagate the header to make sure the user gets the same version of that circle.&lt;/p>
&lt;p>When a test happens with &lt;code>moove&lt;/code> module, for example, and if it is integrated with &lt;code>villager&lt;/code> and &lt;code>butler&lt;/code>, the &lt;code>x-circle-id&lt;/code> header propagation makes you look for &lt;code>villager&lt;/code> and &lt;code>butler&lt;/code> versions that are the same &lt;code>moove&lt;/code> ones, however, this is not the scenario, these requests between &lt;code>moove&lt;/code> and its integration will be treated by the open sea.&lt;/p>
&lt;h2>How to add it?&lt;/h2>
&lt;p>Charles has a library that works for any &lt;strong>Java&lt;/strong> application that uses &lt;strong>Spring&lt;/strong> as a framework and another one for &lt;strong>.NET Core&lt;/strong>. These libs were built because there wasn&amp;rsquo;t another way used in these development environments.&lt;/p>
&lt;p>To use them, you need to add them to your application:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/ZupIT/charlescd/tree/master/tracing/spring">&lt;strong>Lib para Java e Spring&lt;/strong> &lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/ZupIT/charlescd/tree/master/tracing/dotnet-core%20">&lt;strong>Lib para .NET&lt;/strong>&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="alert alert-info" role="alert">
For &lt;strong>Node.js&lt;/strong> there is already a lib and &lt;a href="https://www.npmjs.com/package/hpropagate">&lt;strong>you can find it here&lt;/strong>&lt;/a>
&lt;/div></description></item><item><title>Get Started: First Deploy</title><link>http://docs.charlescd.io/v1.0.x/get-started/first-deploy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.charlescd.io/v1.0.x/get-started/first-deploy/</guid><description>
&lt;hr>
&lt;div class="alert alert-info" role="alert">
After you have created your first &lt;a href="creating-your-first-module/">&lt;strong>module&lt;/strong>&lt;/a> and registered your &lt;a href="defining-a-workspace/deploy-environment">&lt;strong>cluster crendentials&lt;/strong>,&lt;/a> you have finished all the steps needed to make your first deploy. Now, it is necessary to create a &lt;a href="../../../reference/releases">&lt;strong>release&lt;/strong> &lt;/a>and provide it on the configured cluster.
&lt;/div>
&lt;p>Charles offers two alternatives to create a release: use the &lt;a href="../../reference/hyphotesis">&lt;strong>hypothesis&lt;/strong> &lt;/a>flow chart or create it with docker images already available on your configured &lt;a href="defining-a-workspace/docker-registry">&lt;strong>registry&lt;/strong>.&lt;/a>&lt;/p>
&lt;p>Here, we will focus on the first approach with the following steps:&lt;/p>
&lt;ol>
&lt;li>Click on &lt;strong>Hypothesis&lt;/strong> in the homepage left side bar;&lt;/li>
&lt;li>Fill the name with the new hypothesis, on the &lt;strong>Create new hypothesis&lt;/strong> field (at the bottom of the hypothesis list) and press enter.&lt;/li>
&lt;li>At the new created hypothesis board, click on &lt;strong>+Card&lt;/strong> at the bottom of the &lt;strong>To do&lt;/strong> list column;&lt;/li>
&lt;li>Type the name of your new card and press Enter;&lt;/li>
&lt;li>Click on the card and associate it to a Module previously created. After this, a &lt;strong>branch with the name of the card will be created in the configured repository&lt;/strong>;&lt;/li>
&lt;li>Perform your work on this branch. After finish, move the card to &lt;strong>Ready to Go&lt;/strong>;&lt;/li>
&lt;li>Click on &lt;strong>Generate release candidate&lt;/strong> at the bottom of the column &lt;strong>Ready to Go&lt;/strong>;&lt;/li>
&lt;li>Type the release name you want to create and click on &lt;strong>Generate&lt;/strong>. A branch with the prefix &lt;strong>&amp;ldquo;release-darwin-&amp;rdquo; will be created on the module repository, after that the configured CI tool will turn off&lt;/strong>;&lt;/li>
&lt;li>A new card with &lt;strong>Building&lt;/strong> status will show up at the &lt;strong>Builds&lt;/strong> column. Wait until the status change to &lt;strong>Built&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;p>After you have done the whole process above, your release will be ready to deploy.&lt;/p>
&lt;p>&lt;img src="//primeiro_deploy-1-%20%282%29%20%282%29.png" alt="Example of release created and ready to deploy">&lt;/p>
&lt;p>Now, just follow the next steps to the &lt;a href="https://docs.charlescd.io/key-concepts">&lt;strong>Open Sea&lt;/strong>&lt;/a> deploy:&lt;/p>
&lt;ol>
&lt;li>On Charles homepage, click on &lt;strong>Circles&lt;/strong>;&lt;/li>
&lt;li>Click on the Default circle (it represents the open sea)&lt;/li>
&lt;li>Click on &lt;strong>Override release&lt;/strong> in upper right corner;&lt;/li>
&lt;li>Click on &lt;strong>Search for ready releases&lt;/strong>;&lt;/li>
&lt;li>Type the release name created above and click on &lt;strong>Deploy&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;p>Finally, Charles will provide the created release on cluster in the Open Sea. The deploy status will be shown and updated along the process.&lt;/p>
&lt;p>&lt;img src="//primeiro-deploy%20%281%29%20%281%29%20%282%29.gif" alt="Example of a deploy in open sea">&lt;/p></description></item><item><title>Get Started: Using Circles</title><link>http://docs.charlescd.io/v1.0.x/get-started/using-circles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.charlescd.io/v1.0.x/get-started/using-circles/</guid><description>
&lt;hr>
&lt;p>From the moment you start to create your deploys, the next step is to &lt;a href="../../../../../reference/circles#how-to-create-circles">&lt;strong>create your first circles&lt;/strong>&lt;/a> to make your applications segmentation better.&lt;/p>
&lt;p>Follow the next steps:&lt;/p>
&lt;div class="alert alert-info" role="alert">
Before you follow the steps, make sure you have already installed and configured &lt;a href="../../../reference/circle-matcher">&lt;strong>Circle Matcher&lt;/strong>&lt;/a> on your &lt;a href="defining-a-workspace/">&lt;strong>workspace&lt;/strong>__&lt;/a>__
&lt;/div>
&lt;ol>
&lt;li>&lt;a href="../reference/circles#how-to-create-circles">&lt;strong>Create your circle&lt;/strong>&lt;/a>;&lt;/li>
&lt;li>Use circle matcher to verify if the logic rules created for the segmentation are correctly identifying the users.&lt;/li>
&lt;li>Make your deploy on the circle created before.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="//usando-circulos%20%282%29.gif" alt="">&lt;/p></description></item></channel></rss>